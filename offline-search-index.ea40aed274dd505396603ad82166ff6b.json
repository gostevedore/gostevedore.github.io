[{"body":"Stevedore represents a Docker image by an image definition, therefore an image holds the details required to build that image. Note that an image by itself has no sense, it must be defined within the images-tree.\nKeywords reference Keyword Type Description Value builder string/map Identifies the builder to use to create the image.\nYou can define it as a string when you want to refer to a global-builder already defined.\nTo designate it such an in-line builder, you must define it as a yaml data-structure. In the builder’s reference guide you find the details to define it.\nIf the builder attribute is not defined, it is used a builder which does not perform actions. - children map It is a map where each key refers to an image within the images-tree and the value is a list of image versions. - name string It is the image name. By default its value is defined as the images-tree’s image name key namespace string It is the Docker`s registry namespace. - persistent_vars map You define there a list of variables required to build the Docker image. That variables are inherit by the children images. Its value is a key-value data-structure where each key is an string and its value a yaml data-structure. registry string It is the Docker’s registry host. - tags list You define a list of additional tags to generate. - vars map You define there a list of variables required to build the Docker image. Its value is a key-value structure where each key is an string and its value a yaml data-structure. version string It is the Docker’s image tag. By default its value is defined as the images-tree’s image version key Example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 name: ubuntu version: 18.04 builder: driver: docker options: context: path: ./ubuntu namespace: stable registry: myregistry.example.com tags: - latest persistent_vars: ubuntu_version: 18.04 vars: os_base: rootfs.tar children: app1: - \"1.2.3\" - \"*\" app2: - \"0.3.1\" - \"*\" Templating image attributes An image definition allows you to define the values of its attributes as a Golang text template.\nTo achieve that, Stevedore provides you with the next template variables, which refer to values from the images-tree.\nName Template Description name {{ .Name }} It provides the image’s name within the images-tree version {{ .Version }} It provides the image’s version within the images-tree parent {{ .Parent }} It let you to achieve the templating image attributes from the parent image. 1 2 3 4 5 6 7 8 9 10 11 12 13 name: ubuntu version: \"{{ .Version }}\" builder: driver: docker options: context: path: ./ubuntu namespace: stable registry: myregistry.example.com tags: - \"{{ .Version }}-{{ .Parent.Version }}\" persistent_vars: ubuntu_version: \"{{ .Version }}\" ","categories":"","description":"Define the Docker images you want to build\n","excerpt":"Define the Docker images you want to build\n","ref":"/docs/docs-v0.10/reference-guide/image/","tags":["reference","image"],"title":"Image"},{"body":"Stevedore represents a Docker image by an image definition, therefore an image holds the details required to build a Docker image. Note that an image by itself has no sense, it must be defined within the images-tree.\nKeywords reference That section conveys the description of the attributes that you can use to define an image.\nKeyword Type Description Value builder string/map Identifies the builder to use to create the image.\nYou can define it as a string when you want to refer to a global-builder.\nTo designate it such an in-line builder, you have to define it as a yaml data-structure. In the builder’s reference guide you have the details to define it.\nIf the builder attribute is not defined, it is used a builder which does not perform actions.\noptional - children map Contains references to descendant images which uses the current image as parent.\noptional It is a map where each key refers to an image name within the images-tree and the value is a list of image versions.\nExample:\nchildren:\nchild1:\n- v1\n- v2 name string It is the image name.\noptional By default its value is defined as the images-tree’s image name key namespace string It is the Docker`s registry namespace.\noptional - parents map Contains the references to the parent images from which the current image can be built.\noptional It is a map that provides a reference to the parent images within the images-tree. Each key identifies the parent name and the value is a list of versions.\nExample:\nparents:\nparent1:\n- v1\n- v2 persistent_vars list(map) You define there a list of variables required to build the Docker image. That variables are inherit by the children images.\noptional Its value is a key-value data-structure where each key is an string and its value a yaml data-structure.\nExample:\npersistent_vars:\nvar1: value\nvar2: value registry string It is the Docker’s registry host.\noptional - tags list(string) You define a list of additional tags to generate.\noptional - vars list(map) You define there a list of variables required to build the Docker image.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\nvars:\nvar1: value\nvar2: value version string It is the Docker’s image tag.\noptional By default its value is defined as the images-tree’s image version key persistent_labels list(map) It is a key-value metadata pair that provides descriptive information about the image. That variables are inherit by the children images.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\npersistent_labels:\nlabel1: value\nlabel2: value labels list(map) It is a key-value metadata pair that provides descriptive information about the image.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\nlabels:\nlabel1: value\nlabel2: value Templating image attributes An image definition allows you to define the values of its attributes as a Golang text template. To achieve that, Stevedore provides you with the following template variables.\nName Variable Description name Name It provides the image’s name within the images-tree version Version It provides the image’s version within the images-tree parent Parent It let you to achieve the templating image attributes from the parent image. You can access, example to {{ .Parent.Name }} attribute. date RFC3339 DateRFC3339 It stores a date and time value in a string format that conforms to the RFC 3339 standard. The format includes the year, month, day, hour, minute, and second components, and optionally the fraction of a second and the time zone offset. date RFC3339 Nano DateRFC3339Nano It refers to a date/time value formatted according to the RFC3339Nano specification, which includes nanosecond precision. This specification defines a standard format for representing dates and times in machine-readable formats, using the ISO 8601 standard. Image definition example The following example is provided for illustrative purposes only and should not be copied and pasted into your configuration.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 name: base-apps version: 3.2.1 builder: driver: docker options: context: path: ./base-app namespace: stable registry: registry.stevedore.test tags: - latest persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" created_by: stevedore labels: parent_image: \"{{ .Parent.Name }}:{{ .Parent.Version }}\" persistent_vars: base_version: \"{{ .Version }}\" vars: os_base: rootfs.tar parents: alpine: - \"1.36\" ubuntu: - \"22.04\" ","categories":"","description":"Define the Docker images you want to build\n","excerpt":"Define the Docker images you want to build\n","ref":"/docs/docs-v0.11/reference-guide/image/","tags":["reference","image"],"title":"Image"},{"body":"Stevedore represents a Docker image by an image definition, therefore an image holds the details required to build a Docker image. Note that an image by itself has no sense, it must be defined within the images-tree.\nKeywords reference That section conveys the description of the attributes that you can use to define an image.\nKeyword Type Description Value builder string/map Identifies the builder to use to create the image.\nYou can define it as a string when you want to refer to a global-builder.\nTo designate it such an in-line builder, you have to define it as a yaml data-structure. In the builder’s reference guide you have the details to define it.\nIf the builder attribute is not defined, it is used a builder which does not perform actions.\noptional - children map Contains references to descendant images which uses the current image as parent.\noptional It is a map where each key refers to an image name within the images-tree and the value is a list of image versions.\nExample:\nchildren:\nchild1:\n- v1\n- v2 name string It is the image name.\noptional By default its value is defined as the images-tree’s image name key namespace string It is the Docker`s registry namespace.\noptional - parents map Contains the references to the parent images from which the current image can be built.\noptional It is a map that provides a reference to the parent images within the images-tree. Each key identifies the parent name and the value is a list of versions.\nExample:\nparents:\nparent1:\n- v1\n- v2 persistent_vars list(map) You define there a list of variables required to build the Docker image. That variables are inherit by the children images.\noptional Its value is a key-value data-structure where each key is an string and its value a yaml data-structure.\nExample:\npersistent_vars:\nvar1: value\nvar2: value registry string It is the Docker’s registry host.\noptional - tags list(string) You define a list of additional tags to generate.\noptional - vars list(map) You define there a list of variables required to build the Docker image.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\nvars:\nvar1: value\nvar2: value version string It is the Docker’s image tag.\noptional By default its value is defined as the images-tree’s image version key persistent_labels list(map) It is a key-value metadata pair that provides descriptive information about the image. That variables are inherit by the children images.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\npersistent_labels:\nlabel1: value\nlabel2: value labels list(map) It is a key-value metadata pair that provides descriptive information about the image.\noptional Its value is a key-value structure where each key is an string and its value a yaml data-structure.\nExample:\nlabels:\nlabel1: value\nlabel2: value Templating image attributes An image definition allows you to define the values of its attributes as a Golang text template. To achieve that, Stevedore provides you with the following template variables.\nName Variable Description name Name It provides the image’s name within the images-tree version Version It provides the image’s version within the images-tree parent Parent It let you to achieve the templating image attributes from the parent image. You can access, example to {{ .Parent.Name }} attribute. date RFC3339 DateRFC3339 It stores a date and time value in a string format that conforms to the RFC 3339 standard. The format includes the year, month, day, hour, minute, and second components, and optionally the fraction of a second and the time zone offset. date RFC3339 Nano DateRFC3339Nano It refers to a date/time value formatted according to the RFC3339Nano specification, which includes nanosecond precision. This specification defines a standard format for representing dates and times in machine-readable formats, using the ISO 8601 standard. Image definition example The following example is provided for illustrative purposes only and should not be copied and pasted into your configuration.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 name: base-apps version: 3.2.1 builder: driver: docker options: context: path: ./base-app namespace: stable registry: registry.stevedore.test tags: - latest persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" created_by: stevedore labels: parent_image: \"{{ .Parent.Name }}:{{ .Parent.Version }}\" persistent_vars: base_version: \"{{ .Version }}\" vars: os_base: rootfs.tar parents: alpine: - \"1.36\" ubuntu: - \"22.04\" ","categories":"","description":"Define the Docker images you want to build\n","excerpt":"Define the Docker images you want to build\n","ref":"/docs/reference-guide/image/","tags":["reference","image"],"title":"Image"},{"body":"Keywords reference for Ansible Playbook driver The following table describes the attributes that can be configured on the Ansible playbook driver.\nKeyword Type Description Value playbook string It is the playbook file location path\nmandatory - inventory string It is the ansible-playbook inventory\nmandatory It can be either an inventory file or and adhoc inventory, such 127.0.0.1, Variables-mapping reference ansible-playbook driver provides to ansible-playbook the variables-mapping entries as extra-vars.\nKey name Description Default\nargument-name Default\nargument-value image_builder_label_key This is the argument-name to set the name of the intermediate container that is used to create the Docker image using the ansible-playbook driver image_builder_label The argument-value is set as the full qualified name of the image image_from_name_key This is the argument-name to set the name of the parent image from which the new image will be built using the ansible-playbook driver image_from_name The argument-value is set as the parent image’s name within the images-tree image_from_registry_host_key This is the argument-name to set the parent image’s registry host when creating a Docker image using the ansible-playbook driver image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree image_from_registry_namespace_key This is the argument-name to set the parent image’s namespace within the registry when creating a Docker image using the ansible-playbook driver image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree image_from_tag_key This is the argument-name to set the parent image’s tag when creating a Docker image using the ansible-playbook driver. image_from_tag The argument-value is set as the parent image’s version within the images-tree image_name_key This is the argument-name to set the name of the new Docker image that will be built using the ansible-playbook driver image_name If not specified, the argument-value for the image name will be derived from the name of the image within the images-tree image_tag_key This is the argument-name to set the tag for the new Docker image that will be built using the ansible-playbook driver image_tag If not specified, the argument-value for the default tag will be the version of the image within the images-tree image_registry_namespace_key This is the argument-name that you can use to set the namespace or organization of the registry where the image will be pushed. It allows you to specify the namespace separately from the image name when pushing the image to a registry image_registry_namespace There is no default argument-value. If it is not specified, the image will be pushed to the root namespace of the specified registry image_registry_host_key This is the argument-name that you can use to set the Docker registry host when creating a Docker image image_registry_host Stevedore leaves the argument-value empty, which means that the Docker Hub registry host is used image_extra_tags_key This is the argument-name that you can use to specify additional tags to be applied to the Docker image when it is built using the ansible-playbook driver. You can specify multiple tags providing a JSON array image_extra_tags_key - push_image_key Use this argument-name to specify a variable that controls whether the Docker image should be automatically pushed after it’s built push_image The argument-value is set as false ","categories":"","description":"Ansible playbook driver options specification\n","excerpt":"Ansible playbook driver options specification\n","ref":"/docs/docs-v0.10/reference-guide/builder/ansible-playbook/","tags":["reference","builder"],"title":"Ansible playbook driver options"},{"body":"Keywords reference for Ansible Playbook driver The following table describes the attributes that can be configured on the Ansible playbook driver.\nKeyword Type Description Value playbook string It is the playbook file location path\nmandatory - inventory string It is the ansible-playbook inventory\nmandatory It can be either an inventory file or and adhoc inventory, such 127.0.0.1, Variables-mapping reference The ansible-playbook driver provides to ansible-playbook the variables-mapping entries as extra-vars.\nKey name Description Default\nargument-name Default\nargument-value image_builder_label_key This is the argument-name to set the name of the intermediate container that is used to create the Docker image using the ansible-playbook driver image_builder_label The argument-value is set as the full qualified name of the image image_from_name_key This is the argument-name to set the name of the parent image from which the new image will be built using the ansible-playbook driver image_from_name The argument-value is set as the parent image’s name within the images-tree image_from_registry_host_key This is the argument-name to set the parent image’s registry host when creating a Docker image using the ansible-playbook driver image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree image_from_registry_namespace_key This is the argument-name to set the parent image’s namespace within the registry when creating a Docker image using the ansible-playbook driver image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree image_from_tag_key This is the argument-name to set the parent image’s tag when creating a Docker image using the ansible-playbook driver. image_from_tag The argument-value is set as the parent image’s version within the images-tree image_name_key This is the argument-name to set the name of the new Docker image that will be built using the ansible-playbook driver image_name If not specified, the argument-value for the image name will be derived from the name of the image within the images-tree image_tag_key This is the argument-name to set the tag for the new Docker image that will be built using the ansible-playbook driver image_tag If not specified, the argument-value for the default tag will be the version of the image within the images-tree image_registry_namespace_key This is the argument-name that you can use to set the namespace or organization of the registry where the image will be pushed. It allows you to specify the namespace separately from the image name when pushing the image to a registry image_registry_namespace There is no default argument-value. If it is not specified, the image will be pushed to the root namespace of the specified registry image_registry_host_key This is the argument-name that you can use to set the Docker registry host when creating a Docker image image_registry_host Stevedore leaves the argument-value empty, which means that the Docker Hub registry host is used image_extra_tags_key This is the argument-name that you can use to specify additional tags to be applied to the Docker image when it is built using the ansible-playbook driver. You can specify multiple tags providing a JSON array image_extra_tags_key - push_image_key Use this argument-name to specify a variable that controls whether the Docker image should be automatically pushed after it’s built push_image The argument-value is set as false Ansible-playbook driver example The goal of the following example is to show you all the configuration options for a builder which uses the ansible-playbook driver.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 builder: driver: ansible-playbook options: playbook: /src/my-app/site.yml inventory: /src/my-app/inventory.ini variables_mapping: image_builder_label_key: image_builder_label image_from_name_key: image_from_name image_from_registry_host_key: image_from_registry_host image_from_registry_namespace_key: image_from_registry_namespace image_from_tag_key: image_from_tag image_name_key: image_name image_tag_key: image_tag image_registry_namespace_key: image_registry_namespace image_registry_host_key: image_registry_host image_extra_tags_key: image_extra_tags push_image_key: push_image ","categories":"","description":"Ansible playbook driver options specification\n","excerpt":"Ansible playbook driver options specification\n","ref":"/docs/docs-v0.11/reference-guide/builder/ansible-playbook/","tags":["reference","builder"],"title":"Ansible playbook driver options"},{"body":"Keywords reference for Ansible Playbook driver The following table describes the attributes that can be configured on the Ansible playbook driver.\nKeyword Type Description Value playbook string It is the playbook file location path\nmandatory - inventory string It is the ansible-playbook inventory\nmandatory It can be either an inventory file or and adhoc inventory, such 127.0.0.1, Variables-mapping reference The ansible-playbook driver provides to ansible-playbook the variables-mapping entries as extra-vars.\nKey name Description Default\nargument-name Default\nargument-value image_builder_label_key This is the argument-name to set the name of the intermediate container that is used to create the Docker image using the ansible-playbook driver image_builder_label The argument-value is set as the full qualified name of the image image_from_name_key This is the argument-name to set the name of the parent image from which the new image will be built using the ansible-playbook driver image_from_name The argument-value is set as the parent image’s name within the images-tree image_from_registry_host_key This is the argument-name to set the parent image’s registry host when creating a Docker image using the ansible-playbook driver image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree image_from_registry_namespace_key This is the argument-name to set the parent image’s namespace within the registry when creating a Docker image using the ansible-playbook driver image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree image_from_tag_key This is the argument-name to set the parent image’s tag when creating a Docker image using the ansible-playbook driver. image_from_tag The argument-value is set as the parent image’s version within the images-tree image_name_key This is the argument-name to set the name of the new Docker image that will be built using the ansible-playbook driver image_name If not specified, the argument-value for the image name will be derived from the name of the image within the images-tree image_tag_key This is the argument-name to set the tag for the new Docker image that will be built using the ansible-playbook driver image_tag If not specified, the argument-value for the default tag will be the version of the image within the images-tree image_registry_namespace_key This is the argument-name that you can use to set the namespace or organization of the registry where the image will be pushed. It allows you to specify the namespace separately from the image name when pushing the image to a registry image_registry_namespace There is no default argument-value. If it is not specified, the image will be pushed to the root namespace of the specified registry image_registry_host_key This is the argument-name that you can use to set the Docker registry host when creating a Docker image image_registry_host Stevedore leaves the argument-value empty, which means that the Docker Hub registry host is used image_extra_tags_key This is the argument-name that you can use to specify additional tags to be applied to the Docker image when it is built using the ansible-playbook driver. You can specify multiple tags providing a JSON array image_extra_tags_key - push_image_key Use this argument-name to specify a variable that controls whether the Docker image should be automatically pushed after it’s built push_image The argument-value is set as false Ansible-playbook driver example The goal of the following example is to show you all the configuration options for a builder which uses the ansible-playbook driver.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 builder: driver: ansible-playbook options: playbook: /src/my-app/site.yml inventory: /src/my-app/inventory.ini variables_mapping: image_builder_label_key: image_builder_label image_from_name_key: image_from_name image_from_registry_host_key: image_from_registry_host image_from_registry_namespace_key: image_from_registry_namespace image_from_tag_key: image_from_tag image_name_key: image_name image_tag_key: image_tag image_registry_namespace_key: image_registry_namespace image_registry_host_key: image_registry_host image_extra_tags_key: image_extra_tags push_image_key: push_image ","categories":"","description":"Ansible playbook driver options specification\n","excerpt":"Ansible playbook driver options specification\n","ref":"/docs/reference-guide/builder/ansible-playbook/","tags":["reference","builder"],"title":"Ansible playbook driver options"},{"body":"A builder provides relevant information about how to build a Docker image. It is defined using a YAML data structure, and its schema is described on Keywords reference for builders configuration.\nThere are two types of builders: global and in-line. Global builders are defined in the builders configuration file and can be used by any image. Information on how to set the location path for the builders configuration file can be found in the configuration documentation.\nIn-line builders, on the other hand, are defined within the image definition itself.\nGlobal builder A global builder must be defined under the builders block inside the Stevedore configuration. It means that Stevedore looks for the builders block within the file defined in builder_path configuration parameter.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 builders: builder1: driver: docker options: context: path: ./my-apps-golang builder2: driver: docker options: context: path: ./my-apps-phyton builder3: driver: ansible-playbook options: playbook: my-apps-base/site.yml inventory: my-apps-base/all The previous example defines three builders: builder1, builder2 and builder3, all of them are defined within the builders block.\nThrough Stevedore CLI command, you can retrieve the value of the builder_path configuration parameter.\n$ stevedore get configuration PARAMETER VALUE tree_path stevedore.yaml builder_path stevedore.yaml log_path /dev/null num_workers 4 push_images true build_on_cascade false docker_registry_credentials_dir ~/.config/stevedore/credentials semantic_version_tags_enabled false semantic_version_tags_templates [{{ .Major }}.{{ .Minor }}.{{ .Patch }}] In-line builder When you want to create an image using an ad-hoc builder, you can provide it in the image definition itself. In that case, the builder is known as an in-line builder.\nIn-line builders are defined following the Keywords reference for builders configuration as well.\n1 2 3 4 5 6 7 8 9 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library builder: driver: docker options: context: path: my-image-base Keywords reference The coming section describes the keyword attributes required to define a builder.\nKeyword Type Description Value name string Name of the builder\noptional When you create a global builder, by default its name is inherited from the key used within the builders’ data structure.\nIf the builder is defined as an in-line builder, its name is set as the image’s name. driver string Driver to be used to build the image\nmandatory The allowed values are:\n- ansible-playbook\n- docker options map Options hold those parameters required by the driver\nmandatory Each driver requires its own configuration parameters.\nRefer to the options reference for a detailed description. variables_mapping map Stevedore creates automatically a bunch of parameters, such as the image name or image version.\nThe variables mapping is a key-value data structure where you can override the name of those variables that Stevedore creates and passes to drivers.\noptional Each driver requires its own variables mapping.\nRefer to the variables mapping for a detailed description. Builder options Builder options are defined in a YAML data structure, and each driver has its own unique set of options. To learn more about which options are accepted by a particular driver, refer to the corresponding section:\nKeywords reference for Ansible playbook driver options Keywords reference for Docker driver options Variables-mapping reference Stevedore always sends a set of parameters to the driver when building a Docker image. These parameters are organized in a key-value data structure called variables_mapping. Importantly, these parameters are sent to the driver by Stevedore regardless of whether they have been explicitly specified in the image definition or as a CLI flag.\nWhen Stevedore sets a parameter, it looks for the corresponding argument-name in the variables_mapping block within the builder’s definition. Users can override the default value of the argument-name by setting a new value for the argument in the variables_mapping block.\nIt’s important to understand the concepts within the variables-mapping context, such as the key name, argument name, and argument value:\nkey name: This is used internally by Stevedore to identify the name of the argument to use during the image building process. argument name: This is the name of the argument that the driver receives to create a Docker image. Users can override it in the builder definition argument value: This is the value of the argument that the driver receives to create a Docker image. It can be specified in the image definition or CLI flags. Each drivers receives a distinct set of parameters comming from variables-mapping. Refer to the following links to know more about variables that each driver receives:\nVariables-mapping for Ansible playbook driver Variables-mapping for Docker driver Examples Docker driver using path context The following example demonstrates how to define a builder that uses Docker as the driver, with a local build context and a Dockerfile located at build/Dockerfile: 1 2 3 4 5 6 code: driver: docker options: context: path: . dockerfile: build/Dockerfile Docker driver using git context The following example demonstrates how to define a builder that uses Docker as the driver, with a remote Git repository as the build context and a Dockerfile located at build/Dockerfile. In this example, the Git repository https://github.com/apenella/simple-go-helloworld.git is used as the build context with the reference v0.0.0. 1 2 3 4 5 6 7 8 code: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git reference: v0.0.0 dockerfile: build/Dockerfile Ansible playbook driver The following example shows how to define a builder that uses the ansible-playbook driver. In this example, the builder optiosn defines the ansible inventory and playbook, pointing to the Ansible inventory file located at inventory/all and the playbook file located at build_applications.yml.\n1 2 3 4 5 infrastructure: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml ","categories":"","description":"Determine how to build Docker images by specifying the relevant parameters\n","excerpt":"Determine how to build Docker images by specifying the relevant …","ref":"/docs/docs-v0.10/reference-guide/builder/","tags":["reference","builder"],"title":"Builder"},{"body":"A builder provides relevant information about how to build a Docker image. It is defined using a YAML data structure, and its schema is described on Keywords reference for builders configuration.\nThere are two types of builders: global and in-line. Global builders are defined in a builders configuration file and can be used by any image. Information on how to set the location path for the builders configuration file can be found in the configuration documentation.\nIn-line builders, on the other hand, are defined within the image definition itself.\nGlobal builder A global builder must be defined under the builders block inside the Stevedore configuration. It means that Stevedore looks for the builders block within the file defined in builders_path configuration parameter.\nYou can also set a directory on the builders_path. There you can create several files with the builders block defined on them. In that case, Stevedore loads the builders found within all files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 builders: builder1: driver: docker options: context: path: ./my-apps-golang builder2: driver: docker options: context: path: ./my-apps-phyton builder3: driver: ansible-playbook options: playbook: my-apps-base/site.yml inventory: my-apps-base/all The previous example defines three builders: builder1, builder2 and builder3, all of them are defined under the builders block.\nThrough Stevedore CLI command, you can retrieve the value of the builders_path configuration parameter.\n$ stevedore get configuration builders_path: stevedore.yaml concurrency: 4 semantic_version_tags_enabled: false images_path: stevedore.yaml push_images: false semantic_version_tags_templates: - {{ .Major }}.{{ .Minor }}.{{ .Patch }} credentials: storage_type: local format: json local_storage_path: credentials encryption_key: 12345asdfg In-line builder When you want to create an image using an ad-hoc builder, you can provide it in the image definition itself. In that case, the builder is known as an in-line builder.\nIn-line builders are defined following the Keywords reference for builders’ configuration as well.\n1 2 3 4 5 6 7 8 9 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library builder: driver: docker options: context: path: my-image-base Keywords reference The coming section describes the keyword attributes required to define a builder.\nKeyword Type Description Value name string Name of the builder\noptional When you create a global builder, by default its name is inherited from the key used within the builders’ data structure.\nIf the builder is defined as an in-line builder, its name is set as the image’s name. driver string Driver to be used to build the image\nmandatory The allowed values are:\n- ansible-playbook\n- docker options map Options hold those parameters required by the driver\nmandatory Each driver requires its own configuration parameters.\nRefer to the options reference for a detailed description. variables_mapping map Stevedore creates automatically a bunch of parameters, such as the image name or image version.\nThe variables mapping is a key-value data structure where you can override the name of those variables that Stevedore creates and passes to drivers.\noptional Each driver requires its own variables mapping.\nRefer to the variables mapping for a detailed description. Builder options Builder options are defined in a YAML data structure, and each driver has its own unique set of options. To learn more about which options are accepted by a particular driver, refer to the corresponding section:\nKeywords reference for Ansible playbook driver options Keywords reference for Docker driver options Variables-mapping reference Stevedore always sends a set of parameters to the driver when building a Docker image. These parameters are organized in a key-value data structure called variables_mapping. Importantly, these parameters are sent to the driver by Stevedore regardless of whether they have been explicitly specified in the image definition or as a CLI flag.\nWhen Stevedore sets a parameter to the driver that comes from the variables_mapping, it searches for the corresponding argument-name in the variables_mapping dictionary in the builder’s definition. Users can override the default name of the argument by providing a new name for that argument in the same variables_mapping block.\nFor example, Stevedore sends the parent name and version to the driver even if the user doesn’t request them. These parameters are then passed as build arguments to Docker, making them available in the Dockerfile.\nIt’s important to understand the concepts within the variables-mapping context, such as the key name, argument name, and argument value:\nkey name: This is used internally by Stevedore to identify an argument to create during the image’s building process. argument name: This is the name of the argument that the driver receives to create a Docker image. Users can override it in the builder definition. argument value: This is the value of the argument that the driver receives to create a Docker image. It can be specified in the image definition, CLI flags or by Stevedore itself. For more information on how Stevedore sets the argument value using variables-mapping, please refer to variables-mapping for Ansible playbook driver or variables-mapping for Docker driver. Each driver receives a distinct set of parameters coming from variables-mapping. Refer to the following links to know more about the variables that each driver receives:\nVariables-mapping for Ansible playbook driver Variables-mapping for Docker driver Examples Docker driver using path context The following example demonstrates how to define a builder that uses Docker as the driver, with a local build context and a Dockerfile located at build/Dockerfile: 1 2 3 4 5 6 code: driver: docker options: context: path: /src/my-app dockerfile: build/Dockerfile Docker driver using git context The following example demonstrates how to define a builder that uses Docker as the driver, with a remote Git repository as the build context and a Dockerfile located at build/Dockerfile. Besides, the Git repository https://github.com/apenella/simple-go-helloworld.git is used as the build context with the reference v1.2.3. 1 2 3 4 5 6 7 8 code: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git reference: v1.2.3 dockerfile: build/Dockerfile Ansible playbook driver The following example shows how to define a builder that uses the ansible-playbook driver. In this example, the builder optiosn defines the ansible inventory and playbook, pointing to the Ansible inventory file located at inventory/all and the playbook file located at build_applications.yml.\n1 2 3 4 5 infrastructure: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml ","categories":"","description":"Determine how to build Docker images by specifying the relevant parameters\n","excerpt":"Determine how to build Docker images by specifying the relevant …","ref":"/docs/docs-v0.11/reference-guide/builder/","tags":["reference","builder"],"title":"Builder"},{"body":"A builder provides relevant information about how to build a Docker image. It is defined using a YAML data structure, and its schema is described on Keywords reference for builders configuration.\nThere are two types of builders: global and in-line. Global builders are defined in a builders configuration file and can be used by any image. Information on how to set the location path for the builders configuration file can be found in the configuration documentation.\nIn-line builders, on the other hand, are defined within the image definition itself.\nGlobal builder A global builder must be defined under the builders block inside the Stevedore configuration. It means that Stevedore looks for the builders block within the file defined in builders_path configuration parameter.\nYou can also set a directory on the builders_path. There you can create several files with the builders block defined on them. In that case, Stevedore loads the builders found within all files.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 builders: builder1: driver: docker options: context: path: ./my-apps-golang builder2: driver: docker options: context: path: ./my-apps-phyton builder3: driver: ansible-playbook options: playbook: my-apps-base/site.yml inventory: my-apps-base/all The previous example defines three builders: builder1, builder2 and builder3, all of them are defined under the builders block.\nThrough Stevedore CLI command, you can retrieve the value of the builders_path configuration parameter.\n$ stevedore get configuration builders_path: stevedore.yaml concurrency: 4 semantic_version_tags_enabled: false images_path: stevedore.yaml push_images: false semantic_version_tags_templates: - {{ .Major }}.{{ .Minor }}.{{ .Patch }} credentials: storage_type: local format: json local_storage_path: credentials encryption_key: 12345asdfg In-line builder When you want to create an image using an ad-hoc builder, you can provide it in the image definition itself. In that case, the builder is known as an in-line builder.\nIn-line builders are defined following the Keywords reference for builders’ configuration as well.\n1 2 3 4 5 6 7 8 9 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library builder: driver: docker options: context: path: my-image-base Keywords reference The coming section describes the keyword attributes required to define a builder.\nKeyword Type Description Value name string Name of the builder\noptional When you create a global builder, by default its name is inherited from the key used within the builders’ data structure.\nIf the builder is defined as an in-line builder, its name is set as the image’s name. driver string Driver to be used to build the image\nmandatory The allowed values are:\n- ansible-playbook\n- docker options map Options hold those parameters required by the driver\nmandatory Each driver requires its own configuration parameters.\nRefer to the options reference for a detailed description. variables_mapping map Stevedore creates automatically a bunch of parameters, such as the image name or image version.\nThe variables mapping is a key-value data structure where you can override the name of those variables that Stevedore creates and passes to drivers.\noptional Each driver requires its own variables mapping.\nRefer to the variables mapping for a detailed description. Builder options Builder options are defined in a YAML data structure, and each driver has its own unique set of options. To learn more about which options are accepted by a particular driver, refer to the corresponding section:\nKeywords reference for Ansible playbook driver options Keywords reference for Docker driver options Variables-mapping reference Stevedore always sends a set of parameters to the driver when building a Docker image. These parameters are organized in a key-value data structure called variables_mapping. Importantly, these parameters are sent to the driver by Stevedore regardless of whether they have been explicitly specified in the image definition or as a CLI flag.\nWhen Stevedore sets a parameter to the driver that comes from the variables_mapping, it searches for the corresponding argument-name in the variables_mapping dictionary in the builder’s definition. Users can override the default name of the argument by providing a new name for that argument in the same variables_mapping block.\nFor example, Stevedore sends the parent name and version to the driver even if the user doesn’t request them. These parameters are then passed as build arguments to Docker, making them available in the Dockerfile.\nIt’s important to understand the concepts within the variables-mapping context, such as the key name, argument name, and argument value:\nkey name: This is used internally by Stevedore to identify an argument to create during the image’s building process. argument name: This is the name of the argument that the driver receives to create a Docker image. Users can override it in the builder definition. argument value: This is the value of the argument that the driver receives to create a Docker image. It can be specified in the image definition, CLI flags or by Stevedore itself. For more information on how Stevedore sets the argument value using variables-mapping, please refer to variables-mapping for Ansible playbook driver or variables-mapping for Docker driver. Each driver receives a distinct set of parameters coming from variables-mapping. Refer to the following links to know more about the variables that each driver receives:\nVariables-mapping for Ansible playbook driver Variables-mapping for Docker driver Examples Docker driver using path context The following example demonstrates how to define a builder that uses Docker as the driver, with a local build context and a Dockerfile located at build/Dockerfile: 1 2 3 4 5 6 code: driver: docker options: context: path: /src/my-app dockerfile: build/Dockerfile Docker driver using git context The following example demonstrates how to define a builder that uses Docker as the driver, with a remote Git repository as the build context and a Dockerfile located at build/Dockerfile. Besides, the Git repository https://github.com/apenella/simple-go-helloworld.git is used as the build context with the reference v1.2.3. 1 2 3 4 5 6 7 8 code: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git reference: v1.2.3 dockerfile: build/Dockerfile Ansible playbook driver The following example shows how to define a builder that uses the ansible-playbook driver. In this example, the builder optiosn defines the ansible inventory and playbook, pointing to the Ansible inventory file located at inventory/all and the playbook file located at build_applications.yml.\n1 2 3 4 5 infrastructure: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml ","categories":"","description":"Determine how to build Docker images by specifying the relevant parameters\n","excerpt":"Determine how to build Docker images by specifying the relevant …","ref":"/docs/reference-guide/builder/","tags":["reference","builder"],"title":"Builder"},{"body":"Build The process to generate a Docker image.\nBuilder A Builder arranges a set of parameters to build a Docker image, as well as the driver to perform the build. Among those parameters, you can define the Docker build context or Dockerfile location.\nA Builder can be defined as global builder or in-line builder. Global builders are defined within the builders’ folder and can be used by any image’s definition. Refer to configuration to know how to set the builders’ location path.\nOn the snipped below there are defined two global builders: code, at line 2 and global-infr-builder, at line 7. 1 2 3 4 5 6 7 8 9 10 11 builders: code: driver: docker options: context: path: . global-infr-builder: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml You can define a builder inside the image definition. That builder is known as in-line builder.\nOn the next snipped is defined an in-line builder: 1 2 3 4 5 6 7 8 9 10 11 12 simple-go-helloworld: \"0.0.1\": version: \"{{ .Version }}\" builder: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git variables_mapping: image_name_key: image image_tag_key: tag Credentials Credentials are those secrets that Stevedore uses to authenticate on your behalf to a Docker registry.\nDriver Stevedore does not implement a mechanism to build Docker images, but it uses other tools created for that purpose. The driver prepares the build parameters, using the image’s definition as well as the builders’ ones, and performs the request to build the image.\nAs of today, Stevedore supports the following drivers:\ndocker driver that uses the Docker API. When a builder is defined to use the docker driver, it must provide at least the context, along with other parameters such as Dockerfiles location. For further information refer to reference guide. ansible-playbook driver builds Docker images by executing ansible playbooks. When a builder is defined to use an ansible-playbook driver, it must provide the playbook location as well as the Ansible inventory. For further information refer to reference guide. Image An image definition, which is also known as image in Stevedore’s context, defines the Docker image you want to build, how to build it and the relationship with other images.\nAn image must be defined within the Images-tree, and you can refer to it by its name and version. For further information refer to reference guide.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library tags: - latest children: my-ms1: - stable - devel my-ms2: - stable builder: driver: docker options: context: path: my-image-base Images-tree The Images-tree contains the definition of the images, as well as the relationship among them.\nOn the snipped below you can see three images defined within the Images-tree: my-image-base, at line 2, my-ms1, at line 21, and my-ms2, at line 32. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 images_tree: my-image-base: \"stable\": registry: my-registry.example.com namespace: library tags: - latest children: my-ms1: - \"0.0.1\" - devel - \"*\" my-ms2: - \"0.1.5\" - \"*\" builder: driver: docker options: context: path: my-image-base my-ms1: \"0.0.1\": registry: my-registry.example.com namespace: library devel: registry: my-registry.example.com namespace: library \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" my-ms2: \"0.1.5\": registry: my-registry.example.com namespace: library \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" Promote Promoting an image, in Stevedore’s context, means pushing an image to the Docker registry or another namespace on the same Docker registry.\nSemver tag When a tag is semantic version 2.0.0 compliance is known as semver tag.\nWildcard version An image is identified by a name and version. But you can also identify it by just the image name. In that case, that image must define a wildcard version on it. You can recognize when an image has defined a wildcard version because its value is * (start).\nThe wildcard version provides a fallback definition that can be used to build an image by giving any value to the version.\nThe next snipped provides an image with a wildcard version definition, at line 5. The {{ .Version }} could be set as any value used to build the my-app image. 1 2 3 4 5 6 7 8 my-app: \"0.1.5\": registry: my-registry.example.com namespace: library \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" Variables mapping Variables mapping (a.k.a. varmap or varmapping) is a builder’s optional attribute that defines the name of those variables that are automatically generated by Stevedore and used by the driver to perform the request to build an image.\nEach driver defines its variables mapping. For further information refer to variables mapping reference guide.\n","categories":"","description":"The following page describes the main Stevedore concepts and terms that appear along that documentation.\n","excerpt":"The following page describes the main Stevedore concepts and terms …","ref":"/docs/docs-v0.10/getting-started/concepts/","tags":["getting-started","concepts","builder","image","images-tree","driver"],"title":"Concepts"},{"body":"Build The process to generate a Docker image.\nBuilder A Builder arranges a set of parameters to build a Docker image. Among those parameters, you can define the driver to perform the build, the Docker build context or the Dockerfile location.\nYou can define a builder as a global builder or an in-line builder.\nGlobal builders are defined within a folder location specified in the configuration and can be used by any image definition.\nOn the snipped below there are defined two global builders: code, at line 2 and global-infr-builder, at line 7. 1 2 3 4 5 6 7 8 9 10 11 builders: code: driver: docker options: context: path: . global-infr-builder: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml You can define a builder inside the image definition. That builder is known as in-line builder.\nOn the next snipped is defined an in-line builder: 1 2 3 4 5 6 7 8 9 10 11 12 simple-go-helloworld: \"0.0.1\": version: \"{{ .Version }}\" builder: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git variables_mapping: image_name_key: image image_tag_key: tag Credentials Credentials allow users to securely store authentication information, such as access keys, tokens, passwords, and SSH keys. These credentials can be used to authenticate with Docker registries and Git servers, allowing users to push and pull images and code securely and with ease. Refer to the reference guide to know more about the credentials details.\nCredentials store The credential store in Stevedore allows users to securely store and retrieve credentials needed during the Docker images building process. Refer to the reference guide to know more about the credentials store.\nDriver Stevedore relies on existing tools designed for building Docker images rather than implementing its mechanism. The driver plays a crucial role in this process by preparing the build parameters based on the image and builder definitions and triggering the request to build the image.\nAs of today, Stevedore supports the following drivers:\ndocker driver that uses the Docker API. When a builder is defined to use the docker driver, it must provide at least the context, along with other parameters such as Dockerfiles location. For further information refer to reference guide. ansible-playbook driver builds Docker images by executing ansible playbooks. When a builder is defined to use an ansible-playbook driver, it must provide the playbook location as well as the Ansible inventory. For further information refer to reference guide. Image An image definition, which is also known as image in Stevedore’s context, defines the Docker image you want to build, how to build it and the relationship with its parents or children images.\nAn image must be defined within the Images-tree, and you can refer to it by its name and version. For further information refer to reference guide.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library tags: - latest parents: busybox: - \"1.36\" ubuntu: - \"22.04\" builder: driver: docker options: context: path: my-image-base Images-tree The Images-tree is a data structure containing the definition of the images, as well as the relationship among them. Reference guide provides more detailed information about the images-tree.\nOn the snipped below you can see three images defined within the Images-tree: my-image-base, at line 2, my-ms1, at line 13, and my-ms2, at line 35. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 images: my-image-base: \"stable\": registry: my-registry.example.com namespace: library tags: - latest builder: driver: docker options: context: path: my-image-base my-ms1: \"0.0.1\": registry: my-registry.example.com namespace: library parents: my-image-base: - stable devel: registry: my-registry.example.com namespace: library version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" parents: my-image-base: - stable - devel \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" parents: my-image-base: - stable my-ms2: \"0.1.5\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" parents: my-image-base: - stable \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" parents: my-image-base: - stable Promote Promoting an image, in Stevedore’s context, means pushing an image to the Docker registry or another namespace on the same Docker registry.\nSemver tag When a tag is semantic version 2.0.0 compliance is known as semver tag.\nWildcard version An image is identified by a name and version, and when you attempt to build an image using an undefined version, Stevedore uses the image definition with the wildcard version to build the Docker image. It means that the wildcard version provides a default definition that can be used to build an image whose version does not have an explicit image definition.\nYou can recognize when an image has defined a wildcard version definition because the value of the version is * (start).\nThe next snipped provides an image with a wildcard version definition, at line 5. The {{ .Version }} could be set as any value used to build the my-app image. 1 2 3 4 5 6 7 8 my-app: \"0.1.5\": registry: my-registry.example.com namespace: library \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" Variables mapping Variables mapping, also known as varmap or varmapping, is a builder’s optional attribute that defines the name of those variables that are always generated by Stevedore and passed to the driver to perform the request to build an image.\nEach driver defines its variables mapping. For further information refer to variables mapping reference guide.\n","categories":"","description":"Know about the Stevedore concepts and terms that appear along that documentation\n","excerpt":"Know about the Stevedore concepts and terms that appear along that …","ref":"/docs/docs-v0.11/getting-started/concepts/","tags":["getting-started","concepts","builder","image","images-tree","driver"],"title":"Concepts"},{"body":"Build The process to generate a Docker image.\nBuilder A Builder arranges a set of parameters to build a Docker image. Among those parameters, you can define the driver to perform the build, the Docker build context or the Dockerfile location.\nYou can define a builder as a global builder or an in-line builder.\nGlobal builders are defined within a folder location specified in the configuration and can be used by any image definition.\nOn the snipped below there are defined two global builders: code, at line 2 and global-infr-builder, at line 7. 1 2 3 4 5 6 7 8 9 10 11 builders: code: driver: docker options: context: path: . global-infr-builder: driver: ansible-playbook options: inventory: inventory/all playbook: build_applications.yml You can define a builder inside the image definition. That builder is known as in-line builder.\nOn the next snipped is defined an in-line builder: 1 2 3 4 5 6 7 8 9 10 11 12 simple-go-helloworld: \"0.0.1\": version: \"{{ .Version }}\" builder: driver: docker options: context: git: repository: https://github.com/apenella/simple-go-helloworld.git variables_mapping: image_name_key: image image_tag_key: tag Credentials Credentials allow users to securely store authentication information, such as access keys, tokens, passwords, and SSH keys. These credentials can be used to authenticate with Docker registries and Git servers, allowing users to push and pull images and code securely and with ease. Refer to the reference guide to know more about the credentials details.\nCredentials store The credential store in Stevedore allows users to securely store and retrieve credentials needed during the Docker images building process. Refer to the reference guide to know more about the credentials store.\nDriver Stevedore relies on existing tools designed for building Docker images rather than implementing its mechanism. The driver plays a crucial role in this process by preparing the build parameters based on the image and builder definitions and triggering the request to build the image.\nAs of today, Stevedore supports the following drivers:\ndocker driver that uses the Docker API. When a builder is defined to use the docker driver, it must provide at least the context, along with other parameters such as Dockerfiles location. For further information refer to reference guide. ansible-playbook driver builds Docker images by executing ansible playbooks. When a builder is defined to use an ansible-playbook driver, it must provide the playbook location as well as the Ansible inventory. For further information refer to reference guide. Image An image definition, which is also known as image in Stevedore’s context, defines the Docker image you want to build, how to build it and the relationship with its parents or children images.\nAn image must be defined within the Images-tree, and you can refer to it by its name and version. For further information refer to reference guide.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 my-image-base: \"0.0.1\": registry: my-registry.my-domain.cat namespace: library tags: - latest parents: busybox: - \"1.36\" ubuntu: - \"22.04\" builder: driver: docker options: context: path: my-image-base Images-tree The Images-tree is a data structure containing the definition of the images, as well as the relationship among them. Reference guide provides more detailed information about the images-tree.\nOn the snipped below you can see three images defined within the Images-tree: my-image-base, at line 2, my-ms1, at line 13, and my-ms2, at line 35. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 images: my-image-base: \"stable\": registry: my-registry.example.com namespace: library tags: - latest builder: driver: docker options: context: path: my-image-base my-ms1: \"0.0.1\": registry: my-registry.example.com namespace: library parents: my-image-base: - stable devel: registry: my-registry.example.com namespace: library version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" parents: my-image-base: - stable - devel \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" parents: my-image-base: - stable my-ms2: \"0.1.5\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" parents: my-image-base: - stable \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" parents: my-image-base: - stable Promote Promoting an image, in Stevedore’s context, means pushing an image to the Docker registry or another namespace on the same Docker registry.\nSemver tag When a tag is semantic version 2.0.0 compliance is known as semver tag.\nWildcard version An image is identified by a name and version, and when you attempt to build an image using an undefined version, Stevedore uses the image definition with the wildcard version to build the Docker image. It means that the wildcard version provides a default definition that can be used to build an image whose version does not have an explicit image definition.\nYou can recognize when an image has defined a wildcard version definition because the value of the version is * (start).\nThe next snipped provides an image with a wildcard version definition, at line 5. The {{ .Version }} could be set as any value used to build the my-app image. 1 2 3 4 5 6 7 8 my-app: \"0.1.5\": registry: my-registry.example.com namespace: library \"*\": registry: my-registry.example.com namespace: library version: \"{{ .Version }}\" Variables mapping Variables mapping, also known as varmap or varmapping, is a builder’s optional attribute that defines the name of those variables that are always generated by Stevedore and passed to the driver to perform the request to build an image.\nEach driver defines its variables mapping. For further information refer to variables mapping reference guide.\n","categories":"","description":"Know about the Stevedore concepts and terms that appear along that documentation\n","excerpt":"Know about the Stevedore concepts and terms that appear along that …","ref":"/docs/getting-started/concepts/","tags":["getting-started","concepts","builder","image","images-tree","driver"],"title":"Concepts"},{"body":"Stevedore configuration Stevedore can load its configuration either from a local configuration file or environment variables.\nConfiguration from environment variables When you want to use environment variables to define a Stevedore configuration parameter, you must create an environment variable with the same name as the parameter, and prefix it with STEVEDORE_. The environment variables must be uppercased.\nFor example, to define the tree_path parameter as an environment variable, you must create the STEVEDORE_TREE_PATH variable.\nConfiguration from local configuration file Stevedore looks for the user configuration on the listed files, and it does following order that appears in the list:\n./stevedore.yaml ~/.config/stevedore/stevedore.yaml ~/stevedore.yaml However, you can load the configuration from a custom location using --config flag on stevedore CLI. Loading configuration from a custom location has precedence over any other configuration.\nCreate the configuration file Stevedore CLI provides the command stevedore create configuration to create the configuration file. However, you can also make it manually. The command stevedore init, is an alias from the create configuration subcommand that is also available to generate the configuration file.\nWhen you use the CLI to generate the configuration file, the outcome configuration is created at ./stevedore.yaml but you can indicate your desired location by the --config flag.\nStevedore credentials Stevedore could store your Docker registry’s credentials and use them on your behalf during the building or promoting processes.\nThe default folder to store the credentials is ~/.config/stevedore/credentials. Nevertheless, you can define where to store the credentials by setting the docker_registry_credentials_dir parameter.\nIn case you use the CLI to create Stevedore’s configuration, you can also request to create Docker’s registry credentials.\nFinally, with the CLI command stevedore create credentials, you can create as many credentials as you need.\nConfiguration parameters In the coming section are described all the Stevedore configuration parameters.\nbuilder_path Is the Builders location path.\nEnvironment variable: STEVEDORE_BUILDER_PATH Default value: builder_path: stevedore.yaml builders It holds the global builders definition.\nEnvironment variable: STEVEDORE_BUILDERS Stevedore looks for builders definition on the file set at builder_path and loads the builders defined under the builders key. For further information see the reference guide.\nbuild_on_cascade On build command, indicates whether to start to build children’s images once the image build finishes.\nEnvironment variable: STEVEDORE_BUILD_ON_CASCADE Default value: build_on_cascade: false docker_registry_credentials_dir Is the folder to persist the Docker’s registry credentials.\nEnvironment variable: STEVEDORE_DOCKER_REGISTRY_CREDENTIALS_DIR Default value: docker_registry_credentials_dir: ~/.config/stevedore/credentials images_tree It holds images definition as well as its relationship.\nEnvironment variable: STEVEDORE_IMAGES_TREE Stevedore looks for the images on the file set at tree_path and loads the images defined under the images_tree key. For further information see the reference guide.\nlog_path Is the log file location path.\nEnvironment variable: STEVEDORE_LOG_PATH Default value: log_path: /dev/null num_workers It defines the amount of workers to create to build images. That corresponds to the number of images that can be build concurrently.\nEnvironment variable: STEVEDORE_NUM_WORKERS Default value: num_workers: 4 push_images On build command, indicates whether to push images automatically after it finishes.\nEnvironment variable: STEVEDORE_PUSH_IMAGES Default value: push_images: true semantic_version_tags_enabled Indicates whether to generate additional tags based on semantic version tree tags, when the main image tag is semver 2.0.0 compliance.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_ENABLED Default value: semantic_version_tags_enabled: false semantic_version_tags_templates It provides the list of templates used to create the additional tags when thesemantic_version_tags_enabled is enabled.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_TEMPLATES Default value: semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" tree_path Is the images tree location path.\nEnvironment variable: STEVEDORE_TREE_PATH Default value: tree_path: stevedore.yaml Configuration example Here you have an example with all the parameters available\nbuilder_path: stevedore.yaml builders: apps: driver: docker options: context: - path: /apps build_on_cascade: true docker_registry_credentials_dir: ~/.config/stevedore/credentials images_tree: my-app: \"2.1.0\": name: \"{{ .Name }}\" version: \"{{ .Version }}\" registry: registry.stevedore.demo builder: apps log_path: /var/log/stevedore.log num_workers: 4 push_images: true semantic_version_tags_enabled: true semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" tree_path: stevedore.yaml ","categories":"","description":"This page describes the Stevedore's configuration parameters\n","excerpt":"This page describes the Stevedore's configuration parameters\n","ref":"/docs/docs-v0.10/getting-started/configuration/","tags":["getting-started","configuration"],"title":"Configuration"},{"body":"Stevedore configuration Stevedore can load its configuration either from a local configuration file or environment variables.\nConfiguration from environment variables When you want to use environment variables to define a Stevedore configuration parameter, you must create an environment variable with the same name as the parameter, and prefix it with STEVEDORE_. The environment variables must be uppercased.\nFor example, to define the images_path parameter as an environment variable, you must create the STEVEDORE_TREE_PATH variable.\nConfiguration from local configuration file Stevedore looks for the user configuration on the listed files, and it does following order that appears in the list:\n./stevedore.yaml ~/.config/stevedore/stevedore.yaml ~/stevedore.yaml However, you can load the configuration from a custom location using --config flag on stevedore CLI. Loading configuration from a custom location has precedence over any other configuration.\nCreate the configuration file Stevedore CLI provides the command stevedore create configuration to create the configuration file. However, you can also make it manually. The command stevedore init, is an alias from the create configuration subcommand that is also available to generate the configuration file.\nWhen you use the CLI to generate the configuration file, the outcome configuration is created at ./stevedore.yaml but you can indicate your desired location by the --config flag.\nStevedore credentials Stevedore could store your Docker registry’s credentials and use them on your behalf during the building or promoting processes.\nThe default folder to store the credentials is ~/.config/stevedore/credentials. Nevertheless, you can define where to store the credentials by setting the docker_registry_credentials_dir parameter.\nIn case you use the CLI to create Stevedore’s configuration, you can also request to create Docker’s registry credentials.\nFinally, with the CLI command stevedore create credentials, you can create as many credentials as you need.\nConfiguration parameters In the coming section are described all the Stevedore configuration parameters.\nbuilder_path Desprecated configuration parameter, it will be removed on version 0.12.0. Please use builders_path instead.\nIt specifies the file that Stevedore uses to look for the definition of the builders.\nEnvironment variable: STEVEDORE_BUILDER_PATH Default value: builder_path: stevedore.yaml builders_path It specifies the location path where Stevedore looks for the definition of the builders.\nThis can be a file or directory. If you configure a directory, Stevedore loads the builders defined in each file within the directory.\nEnvironment variable: STEVEDORE_BUILDERS_PATH Default value: builders_path: stevedore.yaml builders The builders block contains the global builders definition.\nThe location of the builder definitions is specified in builders_path. Stevedore looks for the builder definitions in the file or directory specified by builders_path. For more details, please see the reference guide.\nEnvironment variable: STEVEDORE_BUILDERS build_on_cascade Desprecated configuration parameter, it will be removed on version 0.12.0. To build an image on cascade, please use the --cascade flag in the build command.\nOn build command, indicates whether to start to build children’s images once the image build finishes.\nEnvironment variable: STEVEDORE_BUILD_ON_CASCADE Default value: build_on_cascade: false concurrency This parameter sets the number of workers that Stevedore creates to build Docker images. Each worker corresponds to one image that can be built concurrently.\nEnvironment variable: STEVEDORE_CONCURRENCY Default value: is the rounded integer value of the result of dividing the total number of CPUs by 4. For example, if the system has 16 CPUs, the default value would be 4. credentials The credentials configuration block defines the credentials store used to authenticate with external Docker registries or a git server. You can set the following parameters to for the credentials store:\nencryption_key The encryption_key parameter specifies the secret key used to encrypt and decrypt credentials. It is required to provide an encryption key when using envvars as the storage type for credentials.\nEnvironment variable: STEVEDORE_CREDENTIALS_ENCRYPTION_KEY Default value: null format The format used to store the credentials. Currently supported formats are JSON and YAML.\nEnvironment variable: STEVEDORE_CREDENTIALS_FORMAT Default value: “json” local_storage_path When you use the local credentials store, it defines the local folder where to store the credentials on disk.\nEnvironment variable: STEVEDORE_CREDENTIALS_LOCAL_STORAGE_PATH Default value: “credentials” storage_type The storage_type parameter defines the type of storage backend to use for persisting the credentials. Currently supported types are local and envvars.\nEnvironment variable: STEVEDORE_CREDENTIALS_STORAGE_TYPE Default value: “local” docker_registry_credentials_dir Desprecated configuration parameter, it will be removed on version 0.12.0. Refer to the credentials configuration block to know more about how to define the credentials parameters.\nThis option specifies the directory where Docker registry credentials are stored for persistence.\nEnvironment variable: STEVEDORE_DOCKER_REGISTRY_CREDENTIALS_DIR Default value: docker_registry_credentials_dir: ~/.config/stevedore/credentials images_path It is the configuration parameter that specifies the location where Stevedore searches for images definition.\nIt can be set to either a file or directory. When the images_path configuration parameter is set to a directory, Stevedore loads the definitions from all files within that directory\nEnvironment variable: STEVEDORE_IMAGES_PATH Default value: images_path: stevedore.yaml images_tree Desprecated configuration parameter, it will be removed on version 0.12.0. Please use images instead..\nThe images_tree block contains the images-tree, where are placed the images definition.\nStevedore looks for the images on the file set at images_path and loads the images defined under the images_tree key. For further information see the reference guide.\nEnvironment variable: STEVEDORE_IMAGES_TREE images The images block in the Stevedore configuration contains the image definitions.\nStevedore looks for these definitions in the file or directory set at images_path, and loads any images defined under the images key. For more information, please refer to the Stevedore reference guide.\nEnvironment variable: STEVEDORE_IMAGES log_path Is the configuration parameter that specifies the location of the log file.\nEnvironment variable: STEVEDORE_LOG_PATH Default value: log_path: /dev/null num_workers Desprecated configuration parameter, it will be removed on version 0.12.0. Please use concurrency instead.\nIt defines the amount of workers to create to build images. That corresponds to the number of images that can be build concurrently.\nEnvironment variable: STEVEDORE_NUM_WORKERS Default value: is the rounded integer value of the result of dividing the total number of CPUs by 4. For example, if the system has 16 CPUs, the default value would be 4. push_images The push_images configuration parameter specifies whether Stevedore should automatically push the built images to the registry after the build process is complete.\nEnvironment variable: STEVEDORE_PUSH_IMAGES Default value: push_images: true semantic_version_tags_enabled When set to true, Stevedore generates additional tags based on the semantic version tree tags, if the main image tag is compliant with semantic version 2.0.0.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_ENABLED Default value: semantic_version_tags_enabled: false semantic_version_tags_templates It is a list of templates that are used to generate additional tags when the semantic_version_tags_enabled configuration parameter is enabled and the main image tag is semver 2.0.0 compliant.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_TEMPLATES Default value: semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" tree_path Desprecated configuration parameter, it will be removed on version 0.12.0. Please use images_path instead.\nIs the images tree location path.\nEnvironment variable: STEVEDORE_TREE_PATH Default value: tree_path: stevedore.yaml Configuration example Here you have an example with all the parameters available\nbuilders_path: stevedore.yaml builders: apps: driver: docker options: context: - path: /apps credentials: storage_type: local local_storage_path: /etc/stevedore/credentials format: json encryption_key: thatisadummyencryptionkey docker_registry_credentials_dir: ~/.config/stevedore/credentials images_path: stevedore.yaml images: my-app: \"2.1.0\": name: \"{{ .Name }}\" version: \"{{ .Version }}\" registry: registry.stevedore.test builder: apps log_path: /var/log/stevedore.log concurrency: 4 push_images: true semantic_version_tags_enabled: true semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" ","categories":"","description":"Understand the multiple configuration options available in Stevedore\n","excerpt":"Understand the multiple configuration options available in Stevedore\n","ref":"/docs/docs-v0.11/getting-started/configuration/","tags":["getting-started","configuration"],"title":"Configuration"},{"body":"Stevedore configuration Stevedore can load its configuration either from a local configuration file or environment variables.\nConfiguration from environment variables When you want to use environment variables to define a Stevedore configuration parameter, you must create an environment variable with the same name as the parameter, and prefix it with STEVEDORE_. The environment variables must be uppercased.\nFor example, to define the images_path parameter as an environment variable, you must create the STEVEDORE_IMAGES_PATH variable.\nConfiguration from local configuration file Stevedore looks for the user configuration on the listed files, and it does following order that appears in the list:\n./stevedore.yaml ~/.config/stevedore/stevedore.yaml ~/stevedore.yaml However, you can load the configuration from a custom location using --config flag on stevedore CLI. Loading configuration from a custom location has precedence over any other configuration.\nCreate the configuration file Stevedore CLI provides the command stevedore create configuration to create the configuration file. However, you can also make it manually. The command stevedore init, is an alias from the create configuration subcommand that is also available to generate the configuration file.\nWhen you use the CLI to generate the configuration file, the outcome configuration is created at ./stevedore.yaml but you can indicate your desired location by the --config flag.\nStevedore credentials Stevedore could store your Docker registry’s credentials and use them on your behalf during the building or promoting processes.\nThe default folder to store the credentials is ~/.config/stevedore/credentials. Nevertheless, you can define where to store the credentials by setting the docker_registry_credentials_dir parameter.\nIn case you use the CLI to create Stevedore’s configuration, you can also request to create Docker’s registry credentials.\nFinally, with the CLI command stevedore create credentials, you can create as many credentials as you need.\nConfiguration parameters In the coming section are described all the Stevedore configuration parameters.\nbuilder_path Desprecated configuration parameter, it will be removed on version 0.12.0. Please use builders_path instead.\nIt specifies the file that Stevedore uses to look for the definition of the builders.\nEnvironment variable: STEVEDORE_BUILDER_PATH Default value: builder_path: stevedore.yaml builders_path It specifies the location path where Stevedore looks for the definition of the builders.\nThis can be a file or directory. If you configure a directory, Stevedore loads the builders defined in each file within the directory.\nEnvironment variable: STEVEDORE_BUILDERS_PATH Default value: builders_path: stevedore.yaml builders The builders block contains the global builders definition.\nThe location of the builder definitions is specified in builders_path. Stevedore looks for the builder definitions in the file or directory specified by builders_path. For more details, please see the reference guide.\nEnvironment variable: STEVEDORE_BUILDERS build_on_cascade Desprecated configuration parameter, it will be removed on version 0.12.0. To build an image on cascade, please use the --cascade flag in the build command.\nOn build command, indicates whether to start to build children’s images once the image build finishes.\nEnvironment variable: STEVEDORE_BUILD_ON_CASCADE Default value: build_on_cascade: false concurrency This parameter sets the number of workers that Stevedore creates to build Docker images. Each worker corresponds to one image that can be built concurrently.\nEnvironment variable: STEVEDORE_CONCURRENCY Default value: is the rounded integer value of the result of dividing the total number of CPUs by 4. For example, if the system has 16 CPUs, the default value would be 4. credentials The credentials configuration block defines the credentials store used to authenticate with external Docker registries or a git server. You can set the following parameters to for the credentials store:\nencryption_key The encryption_key parameter specifies the secret key used to encrypt and decrypt credentials. It is required to provide an encryption key when using envvars as the storage type for credentials.\nEnvironment variable: STEVEDORE_CREDENTIALS_ENCRYPTION_KEY Default value: null format The format used to store the credentials. Currently supported formats are JSON and YAML.\nEnvironment variable: STEVEDORE_CREDENTIALS_FORMAT Default value: “json” local_storage_path When you use the local credentials store, it defines the local folder where to store the credentials on disk.\nEnvironment variable: STEVEDORE_CREDENTIALS_LOCAL_STORAGE_PATH Default value: “credentials” storage_type The storage_type parameter defines the type of storage backend to use for persisting the credentials. Currently supported types are local and envvars.\nEnvironment variable: STEVEDORE_CREDENTIALS_STORAGE_TYPE Default value: “local” docker_registry_credentials_dir Desprecated configuration parameter, it will be removed on version 0.12.0. Refer to the credentials configuration block to know more about how to define the credentials parameters.\nThis option specifies the directory where Docker registry credentials are stored for persistence.\nEnvironment variable: STEVEDORE_DOCKER_REGISTRY_CREDENTIALS_DIR Default value: docker_registry_credentials_dir: ~/.config/stevedore/credentials images_path It is the configuration parameter that specifies the location where Stevedore searches for images definition.\nIt can be set to either a file or directory. When the images_path configuration parameter is set to a directory, Stevedore loads the definitions from all files within that directory\nEnvironment variable: STEVEDORE_IMAGES_PATH Default value: images_path: stevedore.yaml images_tree Desprecated configuration parameter, it will be removed on version 0.12.0. Please use images instead..\nThe images_tree block contains the images-tree, where are placed the images definition.\nStevedore looks for the images on the file set at images_path and loads the images defined under the images_tree key. For further information see the reference guide.\nEnvironment variable: STEVEDORE_IMAGES_TREE images The images block in the Stevedore configuration contains the image definitions.\nStevedore looks for these definitions in the file or directory set at images_path, and loads any images defined under the images key. For more information, please refer to the Stevedore reference guide.\nEnvironment variable: STEVEDORE_IMAGES log_path Is the configuration parameter that specifies the location of the log file.\nEnvironment variable: STEVEDORE_LOG_PATH Default value: log_path: /dev/null num_workers Desprecated configuration parameter, it will be removed on version 0.12.0. Please use concurrency instead.\nIt defines the amount of workers to create to build images. That corresponds to the number of images that can be build concurrently.\nEnvironment variable: STEVEDORE_NUM_WORKERS Default value: is the rounded integer value of the result of dividing the total number of CPUs by 4. For example, if the system has 16 CPUs, the default value would be 4. push_images The push_images configuration parameter specifies whether Stevedore should automatically push the built images to the registry after the build process is complete.\nEnvironment variable: STEVEDORE_PUSH_IMAGES Default value: push_images: true semantic_version_tags_enabled When set to true, Stevedore generates additional tags based on the semantic version tree tags, if the main image tag is compliant with semantic version 2.0.0.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_ENABLED Default value: semantic_version_tags_enabled: false semantic_version_tags_templates It is a list of templates that are used to generate additional tags when the semantic_version_tags_enabled configuration parameter is enabled and the main image tag is semver 2.0.0 compliant.\nEnvironment variable: STEVEDORE_SEMANTIC_VERSION_TAGS_TEMPLATES Default value: semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" tree_path Desprecated configuration parameter, it will be removed on version 0.12.0. Please use images_path instead.\nIs the images tree location path.\nEnvironment variable: STEVEDORE_TREE_PATH Default value: tree_path: stevedore.yaml Configuration example Here you have an example with all the parameters available\nbuilders_path: stevedore.yaml builders: apps: driver: docker options: context: - path: /apps credentials: storage_type: local local_storage_path: /etc/stevedore/credentials format: json encryption_key: thatisadummyencryptionkey docker_registry_credentials_dir: ~/.config/stevedore/credentials images_path: stevedore.yaml images: my-app: \"2.1.0\": name: \"{{ .Name }}\" version: \"{{ .Version }}\" registry: registry.stevedore.test builder: apps log_path: /var/log/stevedore.log concurrency: 4 push_images: true semantic_version_tags_enabled: true semantic_version_tags_templates: - \"{{ .Major }}.{{ .Minor }}.{{ .Patch }}\" ","categories":"","description":"Understand the multiple configuration options available in Stevedore\n","excerpt":"Understand the multiple configuration options available in Stevedore\n","ref":"/docs/getting-started/configuration/","tags":["getting-started","configuration"],"title":"Configuration"},{"body":"","categories":"","description":"Welcome to Stevedore getting started guide, that section describes how to start building Docker images using Stevedore\n","excerpt":"Welcome to Stevedore getting started guide, that section describes how …","ref":"/docs/docs-v0.10/getting-started/","tags":["getting-started"],"title":"Getting Started"},{"body":"","categories":"","description":"Welcome to Stevedore getting started guide, that section describes how to start building Docker images using Stevedore\n","excerpt":"Welcome to Stevedore getting started guide, that section describes how …","ref":"/docs/docs-v0.11/getting-started/","tags":["getting-started"],"title":"Getting Started"},{"body":"","categories":"","description":"Welcome to Stevedore getting started guide, that section describes how to start building Docker images using Stevedore\n","excerpt":"Welcome to Stevedore getting started guide, that section describes how …","ref":"/docs/getting-started/","tags":["getting-started"],"title":"Getting Started"},{"body":"","categories":"","description":"Welcome to the reference guide section of Stevedore. This guide is designed to provide you with detailed information about the Stevedore components\n","excerpt":"Welcome to the reference guide section of Stevedore. This guide is …","ref":"/docs/docs-v0.10/reference-guide/","tags":["reference"],"title":"Reference guide"},{"body":"","categories":"","description":"Welcome to the reference guide section of Stevedore. This guide is designed to provide you with detailed information about the Stevedore components\n","excerpt":"Welcome to the reference guide section of Stevedore. This guide is …","ref":"/docs/docs-v0.11/reference-guide/","tags":["reference"],"title":"Reference guide"},{"body":"","categories":"","description":"Welcome to the reference guide section of Stevedore. This guide is designed to provide you with detailed information about the Stevedore components\n","excerpt":"Welcome to the reference guide section of Stevedore. This guide is …","ref":"/docs/reference-guide/","tags":["reference"],"title":"Reference guide"},{"body":"Installation To install Stevedore, use the script provided on the repository:\ncurl -fsSL https://raw.githubusercontent.com/gostevedore/stevedore/main/scripts/install.sh | sudo bash - Alternatively, you can visit the installation guide for other methods.\nInitial setup Create a folder structure to store image definitions and builder configurations before building Docker images. / $ mkdir -p /docker/images /docker/builders Initialize Stevedore. We create a configuration file for this guide, but it can be also defined on environment variables.\n/ $ cd /docker /docker $ stevedore initialize --builders-path builders --credentials-storage-type local --generate-credentials-encryption-key --images-path images --log-path-file /dev/null 2023-02-03 21:57:20 INFO Executing command 'stevedore [COMMAND] [OPTIONS] initialize' After running this command, you can validate the configuration by using the get configuration subcommand.\n/docker $ stevedore get configuration builders_path: builders concurrency: 4 semantic_version_tags_enabled: false images_path: images log_path: /dev/null push_images: false semantic_version_tags_templates: - {{ .Major }}.{{ .Minor }}.{{ .Patch }} credentials: storage_type: local format: json encryption_key: 1c591ac2d9c2664db265704052c17a67 Create credentials to log into the Docker registry. Since you create a credential using a username and password, Stevedore prompts you to enter a password for the specified username.\n/docker $ stevedore create credentials registry.stevedore.test --username admin Password: Validate that the credentials have been stored. /docker $ stevedore get credentials ID TYPE CREDENTIALS registry.stevedore.test username-password username=admin Stevedore’s configuration encrypts the credentials content at rest by providing an encryption key.\n/docker $ cat credentials/82e99d42ee1191bb42fbfb444920104d 2d067af765e8de39fd76b5cd1a430768a66464208bf8fe0c092bcb146a24feed377b916952494e6cea55187f397aee8c2d90a55ef9882cf85ee97ed5660700afa002767e028b4ea6bde274a524e7100f5729601f2d44caa08a1a102af7f79079723f35953133be56e31d0eaf44f52255a5c94512c74625dca3f00b77f9031d4f48f5cf38293f7a2a90f727c9a5eedf57e001ea8766a6d1e47d20354ad3ca6cf022ee70b97b3598e7377355a7b52f62fab8b6628b230c33cf0234ea1208c0d6ecef65e8e1206e7daf15acbbfb62d77650982c9f487129534b367a7fc2b519fd04538bffe87e57184adabc57e613be4b0e106480f9078c8c1c916b65de0039a3adc6cea70b962c0d93477e114e25a2a160db0218e9312d0df00d9b1044e0b4981982834094a36d8d9e4fd9ed766605c1a0b43ff11219d6e5bebb414e084102ce8cd57e86a658455de5fff927ba9be039be4afd393b7e8137cdefb268ed7c79ff37a60c1be3693372d7890b9f8f7c81fa559719ff83371e080efaee86b239e127a094136d056641a4a58245f71414b53dd96214149c6f54de055064163fa9dcb0a6b274d9269a49e1e4f76a9c0a89ec12d40c577ea1b5c1b3f9f8454f5473518c58e8c139a96335850a6415df7e2d41f5ab383f85d30281fd29493db0f0fb577aba35326cd5063b463a41161888514dbce09ccea5887494733256d74341e2623a5328c656/docker # Build the Docker images for an application In this section, we create an application that has multiple versions and needs to be built from multiple parents.\nPrepare the application. First, let’s create the application directory and the Dockerfile.\nNote that we use the Dockerfile arguments image_from_name and image_from_tag, which are automatically generated by Stevedore to provide information about the parent image. Additionally, any arguments defined in the vars or persistent_vars attributes of the image definition can be used in the Dockerfile when building the image.\n/ $ mkdir -p /apps/my-app / $ cd /apps/my-app /apps/my-app $ cat \u003c\u003c EOF \u003e Dockerfile ARG image_from_name ARG image_from_tag FROM \\${image_from_name}:\\${image_from_tag} CMD [\"echo\",\"Hey there!\"] EOF Define a builder. Next, we need to define the builder for our application. Take into account that to build all the versions in a standardized way we define a single builder, which uses the same Dockerfile.\n/ $ cd /docker/builders /docker/builders $ cat \u003c\u003c EOF \u003e apps.yaml builders: my-app: driver: docker options: context: - path: /apps/my-app EOF To confirm that the builder is already available, use the following command:\n/ $ cd /docker /docker $ stevedore get builders NAME DRIVER my-apps docker Define the foundational images, the parent images. Before creating the image definitions for our application, we define the base images that will serve as a starting point for building the Docker images.\n/ $ cd /docker/images /docker/images $ cat \u003c\u003c EOF \u003e foundational.yaml images: busybox: \"1.36\": persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" \"1.35\": persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" EOF The persistent_labels attribute sets in key-value pairs the labels to add on all images built from the parent image. Currently, the created_at label sets the current date and time in RFC3339Nano format.\nStevedore uses Go’s text/template package to render the image definitions.\nSpecify the images definitions for the application. In this step, we define two versions of the application my-app in the applications.yaml file, version 2.1.0 and 3.2.1.\n/docker/images $ cat \u003c\u003c EOF \u003e applications.yaml images: my-app: \"2.1.0\": name: \"{{ .Name }}\" version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" registry: registry.stevedore.test builder: my-app parents: busybox: - \"1.35\" \"3.2.1\": name: \"{{ .Name }}\" version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" registry: registry.stevedore.test builder: my-app parents: busybox: - \"1.35\" - \"1.36\" EOF The name is set to {{ .Name }} which will be replaced by the actual name of the image. The version is set to {{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }} which will be replaced by the actual version of the image and its parent name and version. The builder is set to my-app, which is the global-builder previously defined in the /docker/builders/apps.yaml file. The parents are set to busybox:1.35 for 2.1.0 version, busybox:1.35 and busybox:1.36 for the 3.2.1 version.\nYou can use the following comand to ensure that images are already defined.\n/ $ cd /docker /docker $ stevedore get images --tree ├─── busybox:1.35 │ ├─── registry.stevedore.test/my-app:3.2.1-busybox1.35 │ ├─── registry.stevedore.test/my-app:2.1.0-busybox1.35 ├─── busybox:1.36 │ ├─── registry.stevedore.test/my-app:3.2.1-busybox1.36 Build the Docker images. Create all the Docker images for our application at the same time, with just one command.\n/docker $ stevedore build my-app registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 1.36: Pulling from library/busybox registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 205dae5015e7: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ Digest: sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ Status: Downloaded newer image for busybox:1.36 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 66ba00ad3de8 registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 7abead2499e1 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 5f0e093a1a94 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ 1.35: Pulling from library/busybox registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ 1.35: Pulling from library/busybox registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ 2461e8255644: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ 2461e8255644: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ Digest: sha256:f4ed5f2163110c26d42741fdc92bd1710e118aed4edb19212548e8ca4e5fca22 registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ Status: Downloaded newer image for busybox:1.35 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e f68fa78323e7 registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ Digest: sha256:f4ed5f2163110c26d42741fdc92bd1710e118aed4edb19212548e8ca4e5fca22 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ Status: Image is up to date for busybox:1.35 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e f68fa78323e7 registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in 72d2a3a19bd5 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in d317a4adc9a3 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 0116092ba9da registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 5/7 : RUN echo \"Hey there! Welcome to ${message}\" \u003e /message.txt registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 03bf5a7e8561 registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 5/7 : RUN echo \"Hey there! Welcome to ${message}\" \u003e /message.txt registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in a4c2d4b4ccb4 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 41aacd4c92a7 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 5de239d250df registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 0c32a6be979e registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e e50f09eee688 registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.122127826Z registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 4068fc05135e registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e d56ea6314840 registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ sha256:d56ea631484054906c3daa8289b064b91725714ddcda4e3874d1e0a7b6561c49 registry.stevedore.test/my-app:3.2.1-busybox1.36 Successfully built d56ea6314840 registry.stevedore.test/my-app:3.2.1-busybox1.36 Successfully tagged registry.stevedore.test/my-app:3.2.1-busybox1.36 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 75869c3433a5 registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in 761056fa55b5 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 3e4e261bed5a registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.121439497Z registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in f03539b96af7 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 2e362f2c8f26 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ sha256:2e362f2c8f265633aec978d68ab5dc1e57efbf27cc2fe442dd8b88c4d82e6582 registry.stevedore.test/my-app:2.1.0-busybox1.35 Successfully built 2e362f2c8f26 registry.stevedore.test/my-app:2.1.0-busybox1.35 Successfully tagged registry.stevedore.test/my-app:2.1.0-busybox1.35 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 0fa400361b6b registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 1ff331631429 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 778d69df86fa registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.121439497Z registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 07ed3cc21395 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 612c3f025134 registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ sha256:612c3f02513437418e3bd10f784af44efe09b36583b3c1b9ba54138d3158f1f4 registry.stevedore.test/my-app:3.2.1-busybox1.35 Successfully built 612c3f025134 registry.stevedore.test/my-app:3.2.1-busybox1.35 Successfully tagged registry.stevedore.test/my-app:3.2.1-busybox1.35 Validate the recently created images.\n/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE registry.stevedore.test/my-app 3.2.1-busybox1.35 612c3f025134 2 minutes ago 4.86MB registry.stevedore.test/my-app 3.2.1-busybox1.36 d56ea6314840 2 minutes ago 4.87MB registry.stevedore.test/my-app 2.1.0-busybox1.35 2e362f2c8f26 2 minutes ago 4.86MB busybox 1.36 66ba00ad3de8 4 weeks ago 4.87MB busybox 1.35 f68fa78323e7 6 weeks ago 4.86MB Promote the images to a Docker registry Now that we already have the images created, and since we did not set the push after the build flag, we promote the images to the Docker registry and push them to the stable namespace.\n/docker $ stevedore promote registry.stevedore.test/my-app:3.2.1-busybox1.36 --promote-image-registry-namespace stable registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ The push refers to repository [registry.stevedore.test/stable/my-app] registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ b64792c17e4a: Pushed registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 3.2.1-busybox1.36: digest: sha256:b1aa5de2f4bf9c031a2047a87fb5c556d0d436123316cad81078462648e58d4b size: 528 ","categories":"","description":"Get started with Stevedore by building your first set of Docker images with just a few steps\n","excerpt":"Get started with Stevedore by building your first set of Docker images …","ref":"/docs/docs-v0.11/getting-started/quickstart/","tags":["getting-started","installation","configuration","build","promote","images-tree"],"title":"Quickstart"},{"body":"Installation To install Stevedore, use the script provided on the repository:\ncurl -fsSL https://raw.githubusercontent.com/gostevedore/stevedore/main/scripts/install.sh | sudo bash - Alternatively, you can visit the installation guide for other methods.\nInitial setup Create a folder structure to store image definitions and builder configurations before building Docker images. / $ mkdir -p /docker/images /docker/builders Initialize Stevedore. We create a configuration file for this guide, but it can be also defined on environment variables.\n/ $ cd /docker /docker $ stevedore initialize --builders-path builders --credentials-storage-type local --generate-credentials-encryption-key --images-path images --log-path-file /dev/null 2023-02-03 21:57:20 INFO Executing command 'stevedore [COMMAND] [OPTIONS] initialize' After running this command, you can validate the configuration by using the get configuration subcommand.\n/docker $ stevedore get configuration builders_path: builders concurrency: 4 semantic_version_tags_enabled: false images_path: images log_path: /dev/null push_images: false semantic_version_tags_templates: - {{ .Major }}.{{ .Minor }}.{{ .Patch }} credentials: storage_type: local format: json encryption_key: 1c591ac2d9c2664db265704052c17a67 Create credentials to log into the Docker registry. Since you create a credential using a username and password, Stevedore prompts you to enter a password for the specified username.\n/docker $ stevedore create credentials registry.stevedore.test --username admin Password: Validate that the credentials have been stored. /docker $ stevedore get credentials ID TYPE CREDENTIALS registry.stevedore.test username-password username=admin Stevedore’s configuration encrypts the credentials content at rest by providing an encryption key.\n/docker $ cat credentials/82e99d42ee1191bb42fbfb444920104d 2d067af765e8de39fd76b5cd1a430768a66464208bf8fe0c092bcb146a24feed377b916952494e6cea55187f397aee8c2d90a55ef9882cf85ee97ed5660700afa002767e028b4ea6bde274a524e7100f5729601f2d44caa08a1a102af7f79079723f35953133be56e31d0eaf44f52255a5c94512c74625dca3f00b77f9031d4f48f5cf38293f7a2a90f727c9a5eedf57e001ea8766a6d1e47d20354ad3ca6cf022ee70b97b3598e7377355a7b52f62fab8b6628b230c33cf0234ea1208c0d6ecef65e8e1206e7daf15acbbfb62d77650982c9f487129534b367a7fc2b519fd04538bffe87e57184adabc57e613be4b0e106480f9078c8c1c916b65de0039a3adc6cea70b962c0d93477e114e25a2a160db0218e9312d0df00d9b1044e0b4981982834094a36d8d9e4fd9ed766605c1a0b43ff11219d6e5bebb414e084102ce8cd57e86a658455de5fff927ba9be039be4afd393b7e8137cdefb268ed7c79ff37a60c1be3693372d7890b9f8f7c81fa559719ff83371e080efaee86b239e127a094136d056641a4a58245f71414b53dd96214149c6f54de055064163fa9dcb0a6b274d9269a49e1e4f76a9c0a89ec12d40c577ea1b5c1b3f9f8454f5473518c58e8c139a96335850a6415df7e2d41f5ab383f85d30281fd29493db0f0fb577aba35326cd5063b463a41161888514dbce09ccea5887494733256d74341e2623a5328c656/docker # Build the Docker images for an application In this section, we create an application that has multiple versions and needs to be built from multiple parents.\nPrepare the application. First, let’s create the application directory and the Dockerfile.\nNote that we use the Dockerfile arguments image_from_name and image_from_tag, which are automatically generated by Stevedore to provide information about the parent image. Additionally, any arguments defined in the vars or persistent_vars attributes of the image definition can be used in the Dockerfile when building the image.\n/ $ mkdir -p /apps/my-app / $ cd /apps/my-app /apps/my-app $ cat \u003c\u003c EOF \u003e Dockerfile ARG image_from_name ARG image_from_tag FROM \\${image_from_name}:\\${image_from_tag} CMD [\"echo\",\"Hey there!\"] EOF Define a builder. Next, we need to define the builder for our application. Take into account that to build all the versions in a standardized way we define a single builder, which uses the same Dockerfile.\n/ $ cd /docker/builders /docker/builders $ cat \u003c\u003c EOF \u003e apps.yaml builders: my-app: driver: docker options: context: - path: /apps/my-app EOF To confirm that the builder is already available, use the following command:\n/ $ cd /docker /docker $ stevedore get builders NAME DRIVER my-apps docker Define the foundational images, the parent images. Before creating the image definitions for our application, we define the base images that will serve as a starting point for building the Docker images.\n/ $ cd /docker/images /docker/images $ cat \u003c\u003c EOF \u003e foundational.yaml images: busybox: \"1.36\": persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" \"1.35\": persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" EOF The persistent_labels attribute sets in key-value pairs the labels to add on all images built from the parent image. Currently, the created_at label sets the current date and time in RFC3339Nano format.\nStevedore uses Go’s text/template package to render the image definitions.\nSpecify the images definitions for the application. In this step, we define two versions of the application my-app in the applications.yaml file, version 2.1.0 and 3.2.1.\n/docker/images $ cat \u003c\u003c EOF \u003e applications.yaml images: my-app: \"2.1.0\": name: \"{{ .Name }}\" version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" registry: registry.stevedore.test builder: my-app parents: busybox: - \"1.35\" \"3.2.1\": name: \"{{ .Name }}\" version: \"{{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }}\" registry: registry.stevedore.test builder: my-app parents: busybox: - \"1.35\" - \"1.36\" EOF The name is set to {{ .Name }} which will be replaced by the actual name of the image. The version is set to {{ .Version }}-{{ .Parent.Name }}{{ .Parent.Version }} which will be replaced by the actual version of the image and its parent name and version. The builder is set to my-app, which is the global-builder previously defined in the /docker/builders/apps.yaml file. The parents are set to busybox:1.35 for 2.1.0 version, busybox:1.35 and busybox:1.36 for the 3.2.1 version.\nYou can use the following comand to ensure that images are already defined.\n/ $ cd /docker /docker $ stevedore get images --tree ├─── busybox:1.35 │ ├─── registry.stevedore.test/my-app:3.2.1-busybox1.35 │ ├─── registry.stevedore.test/my-app:2.1.0-busybox1.35 ├─── busybox:1.36 │ ├─── registry.stevedore.test/my-app:3.2.1-busybox1.36 Build the Docker images. Create all the Docker images for our application at the same time, with just one command.\n/docker $ stevedore build my-app registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 1/7 : ARG image_from_name registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 2/7 : ARG image_from_tag registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 3/7 : FROM ${image_from_name}:${image_from_tag} registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 1.36: Pulling from library/busybox registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 205dae5015e7: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ Digest: sha256:7b3ccabffc97de872a30dfd234fd972a66d247c8cfc69b0550f276481852627c registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ Status: Downloaded newer image for busybox:1.36 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 66ba00ad3de8 registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 7abead2499e1 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 5f0e093a1a94 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ 1.35: Pulling from library/busybox registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ 1.35: Pulling from library/busybox registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ 2461e8255644: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ 2461e8255644: Pull complete registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ Digest: sha256:f4ed5f2163110c26d42741fdc92bd1710e118aed4edb19212548e8ca4e5fca22 registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ Status: Downloaded newer image for busybox:1.35 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e f68fa78323e7 registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ Digest: sha256:f4ed5f2163110c26d42741fdc92bd1710e118aed4edb19212548e8ca4e5fca22 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ Status: Image is up to date for busybox:1.35 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e f68fa78323e7 registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 4/7 : ARG message=my-app! registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in 72d2a3a19bd5 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in d317a4adc9a3 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 0116092ba9da registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 5/7 : RUN echo \"Hey there! Welcome to ${message}\" \u003e /message.txt registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 03bf5a7e8561 registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 5/7 : RUN echo \"Hey there! Welcome to ${message}\" \u003e /message.txt registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in a4c2d4b4ccb4 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 41aacd4c92a7 registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e 5de239d250df registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 0c32a6be979e registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e e50f09eee688 registry.stevedore.test/my-app:3.2.1-busybox1.36 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.122127826Z registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e Running in 4068fc05135e registry.stevedore.test/my-app:3.2.1-busybox1.36 ---\u003e d56ea6314840 registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ sha256:d56ea631484054906c3daa8289b064b91725714ddcda4e3874d1e0a7b6561c49 registry.stevedore.test/my-app:3.2.1-busybox1.36 Successfully built d56ea6314840 registry.stevedore.test/my-app:3.2.1-busybox1.36 Successfully tagged registry.stevedore.test/my-app:3.2.1-busybox1.36 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 75869c3433a5 registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in 761056fa55b5 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 3e4e261bed5a registry.stevedore.test/my-app:2.1.0-busybox1.35 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.121439497Z registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e Running in f03539b96af7 registry.stevedore.test/my-app:2.1.0-busybox1.35 ---\u003e 2e362f2c8f26 registry.stevedore.test/my-app:2.1.0-busybox1.35 ‣ sha256:2e362f2c8f265633aec978d68ab5dc1e57efbf27cc2fe442dd8b88c4d82e6582 registry.stevedore.test/my-app:2.1.0-busybox1.35 Successfully built 2e362f2c8f26 registry.stevedore.test/my-app:2.1.0-busybox1.35 Successfully tagged registry.stevedore.test/my-app:2.1.0-busybox1.35 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 0fa400361b6b registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 6/7 : CMD [\"cat\",\"/message.txt\"] registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 1ff331631429 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 778d69df86fa registry.stevedore.test/my-app:3.2.1-busybox1.35 Step 7/7 : LABEL created_at=2023-02-03T22:42:55.121439497Z registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e Running in 07ed3cc21395 registry.stevedore.test/my-app:3.2.1-busybox1.35 ---\u003e 612c3f025134 registry.stevedore.test/my-app:3.2.1-busybox1.35 ‣ sha256:612c3f02513437418e3bd10f784af44efe09b36583b3c1b9ba54138d3158f1f4 registry.stevedore.test/my-app:3.2.1-busybox1.35 Successfully built 612c3f025134 registry.stevedore.test/my-app:3.2.1-busybox1.35 Successfully tagged registry.stevedore.test/my-app:3.2.1-busybox1.35 Validate the recently created images.\n/docker $ docker images REPOSITORY TAG IMAGE ID CREATED SIZE registry.stevedore.test/my-app 3.2.1-busybox1.35 612c3f025134 2 minutes ago 4.86MB registry.stevedore.test/my-app 3.2.1-busybox1.36 d56ea6314840 2 minutes ago 4.87MB registry.stevedore.test/my-app 2.1.0-busybox1.35 2e362f2c8f26 2 minutes ago 4.86MB busybox 1.36 66ba00ad3de8 4 weeks ago 4.87MB busybox 1.35 f68fa78323e7 6 weeks ago 4.86MB Promote the images to a Docker registry Now that we already have the images created, and since we did not set the push after the build flag, we promote the images to the Docker registry and push them to the stable namespace.\n/docker $ stevedore promote registry.stevedore.test/my-app:3.2.1-busybox1.36 --promote-image-registry-namespace stable registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ The push refers to repository [registry.stevedore.test/stable/my-app] registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ b64792c17e4a: Pushed registry.stevedore.test/my-app:3.2.1-busybox1.36 ‣ 3.2.1-busybox1.36: digest: sha256:b1aa5de2f4bf9c031a2047a87fb5c556d0d436123316cad81078462648e58d4b size: 528 ","categories":"","description":"Get started with Stevedore by building your first set of Docker images with just a few steps\n","excerpt":"Get started with Stevedore by building your first set of Docker images …","ref":"/docs/getting-started/quickstart/","tags":["getting-started","installation","configuration","build","promote","images-tree"],"title":"Quickstart"},{"body":"The following table describes the attributes that can be configured on the Docker driver.\nKeywords reference for Docker driver Keyword Type Description Value context map It is the Docker build context. There you find the set of files required to build a Docker image. The context cam be located either on a local path, known as path context, or in a git respository, named git context.\nmandatory Each context type has its own specifications.\nRefer to the Docker build contexts section for a detailed description of how to configure each context dockerfile string Dockerfiles’s location path. The path is relative to context root\noptional By default, is used the Dockerfile located at context root Docker build contexts Stevedore supports two kinds of Docker build context. The path context, which uses a local folder to create the Docker build context, and the git context, which creates the Docker build context from a git repository.\nPath context Keyword Type Description Value path string It specifies where to find the files required to build the image\nmandatory - Git context Keyword Type Description Value git map It is the keyword under which are defined the git repository details\nmandatory - repository string Repository specifies the git repository to find the files to build the image. repository keyword is placed under git.\nmandatory - reference string Repository reference required to build the image. reference keyword is placed under git.\noptional By default, is used refs/heads/master reference, that belongs to go-git project. Variables-mapping reference Docker driver passes variables mapping to Docker API as build arguments and each variable can be consumed as an ARG inside the Dockerfile definition.\nKey name Description Default\nargument-name Default\nargument-value image_from_name_key This is the argument-name that you can use to set the name of the base image that you want to use as a starting point for your Docker image image_from_name The argument-value is set as the parent image’s name within the images-tree image_from_registry_host_key This is the argument-name that you can use to set the Docker registry host where the base image is located image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree image_from_registry_namespace_key This is the argument-name that you can use to set the namespace of the Docker registry where the base image is located image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree image_from_tag_key This is the argument-name that you can use to set the tag of the base image that you want to use as a starting point for your Docker image image_from_tag The argument-value is set as the parent image’s version within the images-tree The example below defines a Dockerfile that can use the arguments passed by the docker driver to build a Docker image. 1 2 3 4 5 6 ARG image_from_registry_host ARG image_from_registry_namespace ARG image_from_name ARG image_from_tag FROM ${image_from_registry_host}/${image_from_registry_namespace}/${image_from_name}:${image_from_tag} RUN \u003cset-your-action\u003e ","categories":"","description":"Docker driver options specification\n","excerpt":"Docker driver options specification\n","ref":"/docs/docs-v0.10/reference-guide/builder/docker/","tags":["reference","builder"],"title":"Docker driver options"},{"body":"The following table describes the attributes that can be configured on the Docker driver.\nKeywords reference for Docker driver Keyword Type Description Value context map/list(map) The Docker build context is a set of files required to build a Docker image. It can be located on a local path or in a git repository.\nStarting from Stevedore v0.11, you can define a list of contexts that get merged to create the ultimate Docker build context.\nmandatory Each context type has its own specifications.\nRefer to the Docker build contexts section for a detailed description of how to configure each context. dockerfile string Dockerfiles’s location path. The path is relative to context root.\noptional By default, is used the Dockerfile located at the root of the context. Docker build contexts Stevedore supports two kinds of Docker build context. The path context, which uses a local folder to create the Docker build context, and the git context, which creates the Docker build context from a git repository.\nPath context Keyword Type Description Value path string It specifies where to find the files required to build the image.\nmandatory - Here you have an example where you can see all the options of the path context.\nPath context example The goal of the following example is to show you all the configuration options for the path context.\n1 2 3 4 5 6 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - path: /src/my-app Git context Keyword Type Description Value git map It is the keyword under which are defined the git repository details.\nRefer here to know the accepted attributes.\nmandatory - Here you have an example where you can see all the options of the git context.\nGit attributes Keyword Type Description Value auth map You can provide authorization mechanisms over a Git server to achive the Docker build context from there.\nRefer here to know more about the available auth mechanisms.\noptional - path string Is the relative path within the repository, to use as build context. The root of the repository is considered the default path. repository string Repository specifies the git repository to find the files to build the image. repository keyword is placed under git.\nmandatory - reference string Repository reference required to build the image. reference keyword is placed under git.\noptional By default, is used refs/heads/master reference, that belongs to go-git project. Git authorization Stevedore enables you to obtain authorization from a Git server using basic authentication, which involves providing a username and password, or by using a private key. Alternatively, the SSH agent on your system can be used as a fallback method.\nYou can provide the necessary information for obtaining authorization either by directly setting the auth attribute or by specifying a credential ID, in which case the information will be retrieved from the credential store.\nFor security concerns, the recommendation is to use the credentials store or the SSH agent rather than set the credentials directly in the builder.\nKeyword Type Description Value username string This attribute provides the username for the basic authentication method.\noptional - password string This attribute provides the password for the basic authentication method.\noptional - git_ssh_user string The username to use when authenticating.\noptional git private_key_file string The private_key_file attribute is used to provide the path to the private key file.\noptional - private_key_password string Holds the password for the private key file.\noptional - credentials_id string Is the ID of the credential used to retrieve the authorization information from the credentials store.\noptional - Git context example The goal of that example is to show you all the configuration options for the git context, including the various authentication mechanisms that can be used to access a Git repository.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - git: repository: git@gitserver.stevedore.test:/git/repos/my-app.git reference: v0.1.2 path: src auth: username: user password: pAss git_ssh_user: git private_key_file: /home/user/.ssh/id_rsa private_key_password: s3cr3t credentials_id: gitserver.stevedore.test Variables-mapping reference Docker driver passes variables mapping to Docker API as build arguments and each variable can be consumed as an ARG inside the Dockerfile definition.\nKey name Description Default\nargument-name Default\nargument-value image_from_name_key This is the argument-name that you can use to set the name of the base image that you want to use as a starting point for your Docker image. image_from_name The argument-value is set as the parent image’s name within the images-tree. image_from_registry_host_key This is the argument-name that you can use to set the Docker registry host where the base image is located. image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree. image_from_registry_namespace_key This is the argument-name that you can use to set the namespace of the Docker registry where the base image is located. image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree. image_from_tag_key This is the argument-name that you can use to set the tag of the base image that you want to use as a starting point for your Docker image. image_from_tag The argument-value is set as the parent image’s version within the images-tree. Docker driver example The following example is provided for illustrative purposes only and should not be copied and pasted into your configuration.\nThe goal of the following example is to show you all the configuration options for a builder which uses the docker driver.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - path: /src/my-app - git: repository: git@gitserver.stevedore.test:/git/repos/build.git reference: v0.1.2 path: dockerfiles auth: username: user password: pAss git_ssh_user: git private_key_file: /home/user/.ssh/id_rsa private_key_password: s3cr3t credentials_id: gitserver.stevedore.test variables_mapping: image_from_name_key: image_from_name_custom image_from_registry_host_key: image_from_registry_host_custom image_from_registry_namespace_key: image_from_registry_namespace_custom image_from_tag_key: image_from_tag_custom And finally here you have the example of the Dockerfile 1 2 3 4 5 6 ARG image_from_registry_host_custom ARG image_from_registry_namespace_custom ARG image_from_name_custom ARG image_from_tag_custom FROM ${image_from_registry_host_custom}/${image_from_registry_namespace_custom}/${image_from_name_custom}:${image_from_tag_custom} RUN \u003cset-your-action\u003e ","categories":"","description":"Docker driver options specification\n","excerpt":"Docker driver options specification\n","ref":"/docs/docs-v0.11/reference-guide/builder/docker/","tags":["reference","builder"],"title":"Docker driver options"},{"body":"The following table describes the attributes that can be configured on the Docker driver.\nKeywords reference for Docker driver Keyword Type Description Value context map/list(map) The Docker build context is a set of files required to build a Docker image. It can be located on a local path or in a git repository.\nStarting from Stevedore v0.11, you can define a list of contexts that get merged to create the ultimate Docker build context.\nmandatory Each context type has its own specifications.\nRefer to the Docker build contexts section for a detailed description of how to configure each context. dockerfile string Dockerfiles’s location path. The path is relative to context root.\noptional By default, is used the Dockerfile located at the root of the context. Docker build contexts Stevedore supports two kinds of Docker build context. The path context, which uses a local folder to create the Docker build context, and the git context, which creates the Docker build context from a git repository.\nPath context Keyword Type Description Value path string It specifies where to find the files required to build the image.\nmandatory - Here you have an example where you can see all the options of the path context.\nPath context example The goal of the following example is to show you all the configuration options for the path context.\n1 2 3 4 5 6 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - path: /src/my-app Git context Keyword Type Description Value git map It is the keyword under which are defined the git repository details.\nRefer here to know the accepted attributes.\nmandatory - Here you have an example where you can see all the options of the git context.\nGit attributes Keyword Type Description Value auth map You can provide authorization mechanisms over a Git server to achive the Docker build context from there.\nRefer here to know more about the available auth mechanisms.\noptional - path string Is the relative path within the repository, to use as build context. The root of the repository is considered the default path. repository string Repository specifies the git repository to find the files to build the image. repository keyword is placed under git.\nmandatory - reference string Repository reference required to build the image. reference keyword is placed under git.\noptional By default, is used refs/heads/master reference, that belongs to go-git project. Git authorization Stevedore enables you to obtain authorization from a Git server using basic authentication, which involves providing a username and password, or by using a private key. Alternatively, the SSH agent on your system can be used as a fallback method.\nYou can provide the necessary information for obtaining authorization either by directly setting the auth attribute or by specifying a credential ID, in which case the information will be retrieved from the credential store.\nFor security concerns, the recommendation is to use the credentials store or the SSH agent rather than set the credentials directly in the builder.\nKeyword Type Description Value username string This attribute provides the username for the basic authentication method.\noptional - password string This attribute provides the password for the basic authentication method.\noptional - git_ssh_user string The username to use when authenticating.\noptional git private_key_file string The private_key_file attribute is used to provide the path to the private key file.\noptional - private_key_password string Holds the password for the private key file.\noptional - credentials_id string Is the ID of the credential used to retrieve the authorization information from the credentials store.\noptional - Git context example The goal of that example is to show you all the configuration options for the git context, including the various authentication mechanisms that can be used to access a Git repository.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - git: repository: git@gitserver.stevedore.test:/git/repos/my-app.git reference: v0.1.2 path: src auth: username: user password: pAss git_ssh_user: git private_key_file: /home/user/.ssh/id_rsa private_key_password: s3cr3t credentials_id: gitserver.stevedore.test Variables-mapping reference Docker driver passes variables mapping to Docker API as build arguments and each variable can be consumed as an ARG inside the Dockerfile definition.\nKey name Description Default\nargument-name Default\nargument-value image_from_name_key This is the argument-name that you can use to set the name of the base image that you want to use as a starting point for your Docker image. image_from_name The argument-value is set as the parent image’s name within the images-tree. image_from_registry_host_key This is the argument-name that you can use to set the Docker registry host where the base image is located. image_from_registry_host The argument-value is set as the parent image’s registry host within the images-tree. image_from_registry_namespace_key This is the argument-name that you can use to set the namespace of the Docker registry where the base image is located. image_from_registry_namespace The argument-value is set as the parent image’s namespace within the images-tree. image_from_tag_key This is the argument-name that you can use to set the tag of the base image that you want to use as a starting point for your Docker image. image_from_tag The argument-value is set as the parent image’s version within the images-tree. Docker driver example The following example is provided for illustrative purposes only and should not be copied and pasted into your configuration.\nThe goal of the following example is to show you all the configuration options for a builder which uses the docker driver.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 builder: driver: docker options: dockerfile: Dockerfile.alpine context: - path: /src/my-app - git: repository: git@gitserver.stevedore.test:/git/repos/build.git reference: v0.1.2 path: dockerfiles auth: username: user password: pAss git_ssh_user: git private_key_file: /home/user/.ssh/id_rsa private_key_password: s3cr3t credentials_id: gitserver.stevedore.test variables_mapping: image_from_name_key: image_from_name_custom image_from_registry_host_key: image_from_registry_host_custom image_from_registry_namespace_key: image_from_registry_namespace_custom image_from_tag_key: image_from_tag_custom And finally here you have the example of the Dockerfile 1 2 3 4 5 6 ARG image_from_registry_host_custom ARG image_from_registry_namespace_custom ARG image_from_name_custom ARG image_from_tag_custom FROM ${image_from_registry_host_custom}/${image_from_registry_namespace_custom}/${image_from_name_custom}:${image_from_tag_custom} RUN \u003cset-your-action\u003e ","categories":"","description":"Docker driver options specification\n","excerpt":"Docker driver options specification\n","ref":"/docs/reference-guide/builder/docker/","tags":["reference","builder"],"title":"Docker driver options"},{"body":"A driver is a tool that already knows how to build docker images. Stevedore is an intermediate between the Docker end-user and those tools which can perform a Docker image build.\nBased on the images-tree, the builder options and the stevedore CLI command flags, Stevedore prepares all required parameters that define the Docker image and passes them to the driver to build the Docker image.\nTo build a Docker image, a driver receives the parameters defined on the builder’s variables-mapping, the image vars and the image persistent_vars.\n","categories":"","description":"Know more about the tools you can use to build Docker images\n","excerpt":"Know more about the tools you can use to build Docker images\n","ref":"/docs/docs-v0.10/reference-guide/driver/","tags":["reference","driver"],"title":"Driver"},{"body":"A driver is a tool that already knows how to build docker images. Stevedore is an intermediate between the Docker end-user and those tools which can perform a Docker image build.\nBased on the images-tree, the builder options and the stevedore CLI command flags, Stevedore prepares all required parameters that define the Docker image and passes them to the driver to build the Docker image.\nTo build a Docker image, a driver receives the parameters defined on the builder’s variables_mapping, the image vars and the image persistent_vars.\n","categories":"","description":"Know more about the tools you can use to build Docker images\n","excerpt":"Know more about the tools you can use to build Docker images\n","ref":"/docs/docs-v0.11/reference-guide/driver/","tags":["reference","driver"],"title":"Driver"},{"body":"A driver is a tool that already knows how to build docker images. Stevedore is an intermediate between the Docker end-user and those tools which can perform a Docker image build.\nBased on the images-tree, the builder options and the stevedore CLI command flags, Stevedore prepares all required parameters that define the Docker image and passes them to the driver to build the Docker image.\nTo build a Docker image, a driver receives the parameters defined on the builder’s variables_mapping, the image vars and the image persistent_vars.\n","categories":"","description":"Know more about the tools you can use to build Docker images\n","excerpt":"Know more about the tools you can use to build Docker images\n","ref":"/docs/reference-guide/driver/","tags":["reference","driver"],"title":"Driver"},{"body":"Explore a variety of practical examples that demonstrate the capabilities and usage of Stevedore. These examples provide a cumulative learning experience, building upon one another to deepen your knowledge of Stevedore.\nEach example focuses on a specific scenario or use case, guiding you through the necessary steps to achieve the desired outcome. By working through these examples, you will gain hands-on experience and valuable insights into building and managing Docker images with Stevedore. They will empower you to leverage Stevedore’s powerful features and enhance your projects with confidence.\nList of examples Example Description 01-basic-example This example aims to introduce you to Stevedore and its basic concepts and commands. It follows the quickstart guide from the documentation, which serves as a starting point to get familiar with Stevedore. 02-wildcard-version-example This example serves as an introduction to the wildcard version feature in Stevedore. ","categories":"","description":"Discover a variety of practical examples that showcase the capabilities and usage of Stevedore\n","excerpt":"Discover a variety of practical examples that showcase the …","ref":"/docs/docs-v0.11/examples/","tags":["examples"],"title":"Examples"},{"body":"Explore a variety of practical examples that demonstrate the capabilities and usage of Stevedore. These examples provide a cumulative learning experience, building upon one another to deepen your knowledge of Stevedore.\nEach example focuses on a specific scenario or use case, guiding you through the necessary steps to achieve the desired outcome. By working through these examples, you will gain hands-on experience and valuable insights into building and managing Docker images with Stevedore. They will empower you to leverage Stevedore’s powerful features and enhance your projects with confidence.\nList of examples Example Description 01-basic-example This example aims to introduce you to Stevedore and its basic concepts and commands. It follows the quickstart guide from the documentation, which serves as a starting point to get familiar with Stevedore. 02-wildcard-version-example This example serves as an introduction to the wildcard version feature in Stevedore. ","categories":"","description":"Discover a variety of practical examples that showcase the capabilities and usage of Stevedore\n","excerpt":"Discover a variety of practical examples that showcase the …","ref":"/docs/examples/","tags":["examples"],"title":"Examples"},{"body":"Installing Stevedore is a straightforward process, and you have a few options to choose from. You can install using the provided installation script, which will take care of everything for you. Alternatively, you can download and install from a tarball or install from source if you prefer. This gives you more flexibility and control over the installation process.\nUsing the install script Installing Stevedore is easy thanks to the provided installation script. Simply run the following command to install Stevedore:\ncurl -fsSL https://raw.githubusercontent.com/gostevedore/stevedore/main/scripts/install.sh | sudo bash - Note: Before running the above command, make sure you have the ‘curl’ and ‘bash’ utilities installed on your machine.\nInstall from tarball To install Stevedore using a tarball, simply download it directly from Github releases and follow these installation steps:\nGo to the Stevedore Github releases page and download the latest tarball curl -fsSLO https://github.com/gostevedore/stevedore/releases/download/v0.11.0/stevedore_v0.11.0_Linux-x86_64.tar.gz Extract the contents of the tarball to a directory of your choice tar xzfv stevedore_v0.11.0_Linux-x86_64.tar.gz Add the Stevedore executable to your system path or create a symlink ln -sf ${PWD}/stevedore /usr/local/bin/stevedore Install from source If you prefer to install Stevedore from source, you can clone the GitHub repository and build it manually. Here are the steps to follow:\nClone the Stevedore repository using Git: git clone https://github.com/gostevedore/stevedore.git Change the working directory to the cloned repository: cd stevedore Build Stevedore using the Makefile make build Add the Stevedore executable to your system path or create a symlink cp dist/stevedore /usr/local/bin/stevedore You can run make tar to generate a tarball within the dist folder.\nUse Goreleaser to create a snapshot In case you want to use GoReleaser to generate a snapshot you can run make snapshot.\n","categories":"","description":"Learn about the different methods available to install Stevedore\n","excerpt":"Learn about the different methods available to install Stevedore\n","ref":"/docs/docs-v0.11/getting-started/install/","tags":["getting-started","installation"],"title":"Installation"},{"body":"Installing Stevedore is a straightforward process, and you have a few options to choose from. You can install using the provided installation script, which will take care of everything for you. Alternatively, you can download and install from a tarball or install from source if you prefer. This gives you more flexibility and control over the installation process.\nUsing the install script Installing Stevedore is easy thanks to the provided installation script. Simply run the following command to install Stevedore:\ncurl -fsSL https://raw.githubusercontent.com/gostevedore/stevedore/main/scripts/install.sh | sudo bash - Note: Before running the above command, make sure you have the ‘curl’ and ‘bash’ utilities installed on your machine.\nInstall from tarball To install Stevedore using a tarball, simply download it directly from Github releases and follow these installation steps:\nGo to the Stevedore Github releases page and download the latest tarball curl -fsSLO https://github.com/gostevedore/stevedore/releases/download/v0.11.0/stevedore_v0.11.0_Linux-x86_64.tar.gz Extract the contents of the tarball to a directory of your choice tar xzfv stevedore_v0.11.0_Linux-x86_64.tar.gz Add the Stevedore executable to your system path or create a symlink ln -sf ${PWD}/stevedore /usr/local/bin/stevedore Install from source If you prefer to install Stevedore from source, you can clone the GitHub repository and build it manually. Here are the steps to follow:\nClone the Stevedore repository using Git: git clone https://github.com/gostevedore/stevedore.git Change the working directory to the cloned repository: cd stevedore Build Stevedore using the Makefile make build Add the Stevedore executable to your system path or create a symlink cp dist/stevedore /usr/local/bin/stevedore You can run make tar to generate a tarball within the dist folder.\nUse Goreleaser to create a snapshot In case you want to use GoReleaser to generate a snapshot you can run make snapshot.\n","categories":"","description":"Learn about the different methods available to install Stevedore\n","excerpt":"Learn about the different methods available to install Stevedore\n","ref":"/docs/getting-started/install/","tags":["getting-started","installation"],"title":"Installation"},{"body":"To create a Docker image using the ansible-playbook driver you need an Ansible playbook to carry out that task. Since Stevedore executes the ansible-playbook command, you must install the Ansible tool set before building an image.\nThe driver prepares the parameters on the builder’s variables-mapping, the image vars and the image persistent_vars and passed them as Ansible extra-vars. It then utilizes the go-ansible library to execute the corresponding ansible-playbook commands.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the playbook and inventory as well as the variables-mapping.\nRefer to the ansible-playbook reference to know more about how to set the options for the ansible-playbook driver.\nRecipe to write the Ansible playbook To write an Ansible playbook that builds a Docker image, you will need to use the docker collection. This collection provides a set of modules that allow you to interact with the Docker API.\nYour playbook should include the following steps:\nThe Ansible playbook you want to use to create a Docker image must include the following action defined there:\nStart a Docker container that will be used as the base for the image you want to create. You can use the docker_container module to start the container, specifying the image you want to use as the base. Provision and configure the base container to include any required packages, libraries, or other dependencies. You can use the standard Ansible modules to perform these tasks. Once the container is fully provisioned and configured, you can use the docker_commit module to create a new Docker image based on the modified container. By following these steps, you can create a Docker image using an Ansible playbook.\n","categories":"","description":"This page describes the ansible-playbook driver\n","excerpt":"This page describes the ansible-playbook driver\n","ref":"/docs/docs-v0.10/reference-guide/driver/ansible-playbook/","tags":"","title":"Ansible playbook"},{"body":"To create a Docker image using the ansible-playbook driver you need an Ansible playbook to carry out that task. Since Stevedore executes the ansible-playbook command, you must install the Ansible tool set before building an image.\nThe driver prepares the parameters on the builder’s variables-mapping, the image vars and the image persistent_vars and passed them as Ansible extra-vars.\nStevedore utilizes the go-ansible library to execute the corresponding ansible-playbook commands.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the playbook and inventory as well as the variables-mapping.\nRefer to the ansible-playbook reference to know more about how to set the options for the ansible-playbook driver.\nRecipe to write the Ansible playbook To write an Ansible playbook that builds a Docker image, you will need to use the docker collection. This collection provides a set of modules that allow you to interact with the Docker API.\nYour playbook should include the following steps:\nThe Ansible playbook you want to use to create a Docker image must include the following action defined there:\nStart a Docker container that will be used as the base for the image you want to create. You can use the docker_container module to start the container, specifying the image you want to use as the base. Provision and configure the base container to include any required packages, libraries, or other dependencies. You can use the standard Ansible modules to perform these tasks. Once the container is fully provisioned and configured, you can use the docker_commit module to create a new Docker image based on the modified container. By following these steps, you can create a Docker image using an Ansible playbook.\n","categories":"","description":"This page describes the ansible-playbook driver\n","excerpt":"This page describes the ansible-playbook driver\n","ref":"/docs/docs-v0.11/reference-guide/driver/ansible-playbook/","tags":"","title":"Ansible playbook"},{"body":"To create a Docker image using the ansible-playbook driver you need an Ansible playbook to carry out that task. Since Stevedore executes the ansible-playbook command, you must install the Ansible tool set before building an image.\nThe driver prepares the parameters on the builder’s variables-mapping, the image vars and the image persistent_vars and passed them as Ansible extra-vars.\nStevedore utilizes the go-ansible library to execute the corresponding ansible-playbook commands.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the playbook and inventory as well as the variables-mapping.\nRefer to the ansible-playbook reference to know more about how to set the options for the ansible-playbook driver.\nRecipe to write the Ansible playbook To write an Ansible playbook that builds a Docker image, you will need to use the docker collection. This collection provides a set of modules that allow you to interact with the Docker API.\nYour playbook should include the following steps:\nThe Ansible playbook you want to use to create a Docker image must include the following action defined there:\nStart a Docker container that will be used as the base for the image you want to create. You can use the docker_container module to start the container, specifying the image you want to use as the base. Provision and configure the base container to include any required packages, libraries, or other dependencies. You can use the standard Ansible modules to perform these tasks. Once the container is fully provisioned and configured, you can use the docker_commit module to create a new Docker image based on the modified container. By following these steps, you can create a Docker image using an Ansible playbook.\n","categories":"","description":"This page describes the ansible-playbook driver\n","excerpt":"This page describes the ansible-playbook driver\n","ref":"/docs/reference-guide/driver/ansible-playbook/","tags":"","title":"Ansible playbook"},{"body":"The Docker driver is a Stevedore tool that enables building Docker images using the Docker Engine API. To accomplish this, Stevedore uses the go-docker-builder library, which provides a set of abstractions on top of the Docker API, allowing Stevedore to prepare the Docker build context and set the build arguments required to build the Docker image. This data is then sent to the Docker Engine API via the go-docker-builder library, which creates the Docker image based on the provided parameters.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the Docker’s build context and the Dockerfile.\nRefer to the Docker reference to know more about how to set the options for the Docker driver.\n","categories":"","description":"This page describes the Docker driver\n","excerpt":"This page describes the Docker driver\n","ref":"/docs/docs-v0.10/reference-guide/driver/docker/","tags":"","title":"Docker"},{"body":"The Docker driver is a Stevedore tool that enables building Docker images using the Docker Engine API.\nTo accomplish this, Stevedore uses the go-docker-builder library, which provides a set of abstractions on top of the Docker API, allowing Stevedore to prepare the Docker build context and set the build arguments required to build the Docker image. This data is then sent to the Docker Engine API via the go-docker-builder library, which creates the Docker image based on the provided parameters.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the Docker’s build context and the Dockerfile.\nRefer to the Docker reference to know more about how to set the options for the Docker driver.\n","categories":"","description":"This page describes the Docker driver\n","excerpt":"This page describes the Docker driver\n","ref":"/docs/docs-v0.11/reference-guide/driver/docker/","tags":"","title":"Docker"},{"body":"The Docker driver is a Stevedore tool that enables building Docker images using the Docker Engine API.\nTo accomplish this, Stevedore uses the go-docker-builder library, which provides a set of abstractions on top of the Docker API, allowing Stevedore to prepare the Docker build context and set the build arguments required to build the Docker image. This data is then sent to the Docker Engine API via the go-docker-builder library, which creates the Docker image based on the provided parameters.\nDriver configuration The configuration of the driver is done through the builder. There you can set the path of the Docker’s build context and the Dockerfile.\nRefer to the Docker reference to know more about how to set the options for the Docker driver.\n","categories":"","description":"This page describes the Docker driver\n","excerpt":"This page describes the Docker driver\n","ref":"/docs/reference-guide/driver/docker/","tags":"","title":"Docker"},{"body":"The images-tree is a map of maps data structure that contains the definitions of the images, as well as the relationships between them. It follows the following rules:\nYou define the images-tree in YAML structure. Stevedore looks for the images-tree in the file specified on the tree_path configuration parameter. The main key containing the tree definition is named images_tree. The value is a map of maps data structure. You place all the image names that belong to the images-tree under “images_tree” block. Each image’s name is a first-level key. You place the second-level keys under each image name key to identify the image versions. You define the image version’s value as the image definition for that specific version. Images can be related to each other, and these relationships are defined using the parent name and version in the image definition. Images in the images-tree can be built using Stevedore’s build command, which will build the image and any of its descendants. In case an image name or image version contains a . (dot), you must quote it to avoid the YAML parser to fails.\nExample The following example specifies an images-tree that provides multiple image definitions for the ubuntu, php-fpm, and php-cli images. The ubuntu image has two versions defined, 18.04 and 20.04, each with its image definition. The value of these versions is the image definition for each one of them.\nPlease note that if an image name or version contains a . (dot), it should be enclosed in quotes to prevent the YAML parser from failing.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 images_tree: ubuntu: \"18.04\": builder: global-infr-builder children: - php-fpm: - \"8.0\" \"20.04\": builder: global-infr-builder children: - php-fpm: - \"8.1\" - php-cli: - \"8.1\" php-fpm: \"8.0\": builder: driver: docker context: path: php-fpm vars: version: \"{{ .Version }}\" \"8.1\": builder: driver: docker context: path: php-fpm vars: version: \"{{ .Version }}\" php-cli: \"8.1\": builder: driver: docker context: path: php-fpm vars: version: \"{{ .Version }}\" ","categories":"","description":"Add your images definition into Stevedore's images-tree and create a relationship among them\n","excerpt":"Add your images definition into Stevedore's images-tree and create a …","ref":"/docs/docs-v0.10/reference-guide/images-tree/","tags":["reference","images-tree"],"title":"Images tree"},{"body":"The images-tree is a data structure that contains the definitions of the images, as well as the relationships between them. It is defined in a YAML format containing a main key named images, which is a map of maps data structure.\nUnder the images block, you place all the image names, and each image’s name is a first-level key. For each image name, you have to define a second level of keys that identifies the image versions. The value of each version is the image definition for that specific name and version.\nNote that in case an image name or image version contains a . (dot), you must quote it to avoid the YAML parser failing. This is a common issue that can be easily solved by wrapping the name or version in quotes.\nImages can be related to each other, and these relationships are defined using their name and version. The relationships can be established from the image to its parents or its children. The images reference guide provides more information about how to set the images’ relationship.\nTo know which images can be built, Stevedore searches for the images-tree in the file specified on the images_tree configuration parameter, or in a directory specified by the same parameter. In the latter case, Stevedore loads the image definitions found within all the files in the directory.\nExample The following example specifies an images-tree that provides multiple image definitions for the busybox, php-fpm, php-cli and my-app images.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 images: root: latest: persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" busybox: \"1.35\": builder: global-infr-builder parents: root: - latest \"1.36\": builder: global-infr-builder parents: root: - latest php-fpm: \"8.0\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-fpm parents: busybox: - \"1.35\" \"8.1\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-fpm parents: busybox: - \"1.35\" - \"1.36\" php-cli: \"8.1\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-cli parents: busybox: - \"1.35\" - \"1.36\" my-app: \"*\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: git: repository: git@gitserver.stevedore.test:/git/repos/my-app.git reference: \"{{ .Version }}\" auth: credentials_id: mygit.stevedore.test parents: php-fpm: - \"8.1\" You can check the previously defined images-tree by executing stevedore get images --tree. 1 2 3 4 5 6 7 8 9 10 $ stevedore get images --tree ├─── root:latest │ ├─── busybox:1.35 │ │ ├─── php-fpm:8.0-1.35 │ │ ├─── php-fpm:8.1-1.35 │ │ │ ├─── my-app:{{ .Version }}-{{ .Parent.Version }} │ │ ├─── php-cli:8.1-1.35 │ ├─── busybox:1.36 │ │ ├─── php-fpm:8.1-1.36 │ │ ├─── php-cli:8.1-1.36 ","categories":"","description":"Add your images definition into Stevedore's images-tree and create a relationship among them\n","excerpt":"Add your images definition into Stevedore's images-tree and create a …","ref":"/docs/docs-v0.11/reference-guide/images-tree/","tags":["reference","images-tree"],"title":"Images tree"},{"body":"The images-tree is a data structure that contains the definitions of the images, as well as the relationships between them. It is defined in a YAML format containing a main key named images, which is a map of maps data structure.\nUnder the images block, you place all the image names, and each image’s name is a first-level key. For each image name, you have to define a second level of keys that identifies the image versions. The value of each version is the image definition for that specific name and version.\nNote that in case an image name or image version contains a . (dot), you must quote it to avoid the YAML parser failing. This is a common issue that can be easily solved by wrapping the name or version in quotes.\nImages can be related to each other, and these relationships are defined using their name and version. The relationships can be established from the image to its parents or its children. The images reference guide provides more information about how to set the images’ relationship.\nTo know which images can be built, Stevedore searches for the images-tree in the file specified on the images_tree configuration parameter, or in a directory specified by the same parameter. In the latter case, Stevedore loads the image definitions found within all the files in the directory.\nExample The following example specifies an images-tree that provides multiple image definitions for the busybox, php-fpm, php-cli and my-app images.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 images: root: latest: persistent_labels: created_at: \"{{ .DateRFC3339Nano }}\" busybox: \"1.35\": builder: global-infr-builder parents: root: - latest \"1.36\": builder: global-infr-builder parents: root: - latest php-fpm: \"8.0\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-fpm parents: busybox: - \"1.35\" \"8.1\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-fpm parents: busybox: - \"1.35\" - \"1.36\" php-cli: \"8.1\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: path: php-cli parents: busybox: - \"1.35\" - \"1.36\" my-app: \"*\": version: \"{{ .Version }}-{{ .Parent.Version }}\" builder: driver: docker context: git: repository: git@gitserver.stevedore.test:/git/repos/my-app.git reference: \"{{ .Version }}\" auth: credentials_id: mygit.stevedore.test parents: php-fpm: - \"8.1\" You can check the previously defined images-tree by executing stevedore get images --tree. 1 2 3 4 5 6 7 8 9 10 $ stevedore get images --tree ├─── root:latest │ ├─── busybox:1.35 │ │ ├─── php-fpm:8.0-1.35 │ │ ├─── php-fpm:8.1-1.35 │ │ │ ├─── my-app:{{ .Version }}-{{ .Parent.Version }} │ │ ├─── php-cli:8.1-1.35 │ ├─── busybox:1.36 │ │ ├─── php-fpm:8.1-1.36 │ │ ├─── php-cli:8.1-1.36 ","categories":"","description":"Add your images definition into Stevedore's images-tree and create a relationship among them\n","excerpt":"Add your images definition into Stevedore's images-tree and create a …","ref":"/docs/reference-guide/images-tree/","tags":["reference","images-tree"],"title":"Images tree"},{"body":"build Stevedore command to build images\nUsage: stevedore build \u003cimage\u003e [flags] Flags: -b, --builder-name string Intermediate builder's container name [only applies to ansible-playbook builders] -C, --cascade Build images on cascade. Children's image build is started once the image build finishes -d, --cascade-depth int Number images levels to build when build on cascade is executed (default -1) -L, --connection-local Use local connection for ansible [only applies to ansible-playbook builders] --debug Enable debug mode to show build options -D, --dry-run Run a dry-run build -S, --enable-semver-tags Generate a set of tags for the image based on the semantic version tree when main version is semver 2.0.0 compliance -h, --help help for build -I, --image-from string Image (FROM) parent's name -N, --image-from-namespace string Image (FROM) parent's registry namespace -R, --image-from-registry string Image (FROM) parent's registry host -V, --image-from-version string Image (FROM) parent's version -i, --image-name string Image name- It overrides image tree image name -v, --image-version strings Image versions to be built. One or more image versions could be built -H, --inventory string Specify inventory hosts' path or comma separated list of hosts [only applies to Ansible builders] -l, --limit string Further limit selected hosts to an additional pattern [only applies to Ansible builders] -n, --namespace string Image's registry namespace where image will be stored -P, --no-push Do not push the image to registry once it is built -w, --num-workers int Number of workers to execute builds -r, --registry string Image's registry host where image will be stored -T, --semver-tags-template strings List templates to generate tags following semantic version expression -s, --set strings Set variables to use during the build. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -p, --set-persistent strings Set persistent variables to use during the build. A persistent variable will be available on child image during its build and could not be overwrite. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -t, --tag strings Give an extra tag for the docker image Global Flags: -c, --config string Configuration file location path completion Stevedore command to generate shell completions. Here you could find more details about completion\nUsage: stevedore completion [flags] Flags: -h, --help help for completion Global Flags: -c, --config string Configuration file location path create Stevedore command to create configuration files\nUsage: stevedore create [flags] stevedore create [command] Aliases: create, generate Available Commands: configuration Create stevedore configuration file credentials Create stevedore docker registry credentials create configuration Stevedore subcommand to initialize a project with a configuration file and a credential file\nUsage: stevedore create configuration [flags] Aliases: configuration, config Flags: -C, --build-on-cascade On build, start children images building once an image build is finished. Its default value is 'false' -b, --builder-path-file string Builders location path. Its default value is 'stevedore.yaml' -d, --credentials-dir string Location path to store docker registry credentials. Its default value is 'credentials' -p, --credentials-password credentials-regristry Docker registry password. It is ignored unless credentials-regristry value is defined -r, --credentials-registry-host string Docker registry host to register credentials -u, --credentials-username credentials-regristry Docker registry username. It is ignored unless credentials-regristry value is defined -s, --enable-semver-tags Generate extra tags when the main image tags is semver 2.0.0 compliance. Its default value is 'false' --force Force to create configuration file when the file already exists -h, --help help for configuration -l, --log-path-file string Log file location path. Its default value is '/dev/null' -P, --no-push-images On build, push images automatically after it finishes. Its default value is 'true' -w, --num-workers int It defines the number of workers to build images which corresponds to the number of images that can be build concurrently. Its default value is '4' (default -1) -T, --semver-tags-template strings List of templates which define those extra tags to generate when 'semantic_version_tags_enabled' is enabled. Its default value is '{{ .Major }}.{{ .Minor }}.{{ .Patch }}' -t, --tree-path-file string Images tree location path. Its default value is 'stevedore.yaml' Global Flags: -c, --config string Configuration file location path create credentials Stevedore subcommand to create a credentials file\nUsage: stevedore create credentials [flags] Aliases: credentials, auth Flags: -d, --credentials-dir string Location path to store docker registry credentials (default \"/etc/stevedore/credentials\") -h, --help help for credentials -p, --password string Docker registry password -r, --registry-host string Docker registry host to register credentials -u, --username string Docker registry username Global Flags: -c, --config string Configuration file location path get Stevedore command to get items information\nUsage: stevedore get [flags] stevedore get [command] Aliases: get, list Available Commands: builders get builders return all builders defined configuration get configuration credentials get credentials return all credentials defined images get images return all images defined Flags: -h, --help help for get Global Flags: -c, --config string Configuration file location path Use \"stevedore get [command] --help\" for more information about a command. get builders Stevedore subcommand to get builders information\nUsage: stevedore get builders [flags] Aliases: builders, builder Flags: -h, --help help for builders Global Flags: -c, --config string Configuration file location path get configuration Stevedore subcommand to get configuration information\nUsage: stevedore get configuration [flags] Aliases: configuration, config, conf, cfg Flags: -h, --help help for configuration Global Flags: -c, --config string Configuration file location path get credentials Stevedore subcommand to get credentials information\nUsage: stevedore get credentials [flags] Aliases: credentials, auth, auths, credential Flags: -h, --help help for credentials -w, --wide Show wide docker registry credentials information Global Flags: -c, --config string Configuration file location path get images Stevedore subcommand to get images information\nUsage: stevedore get images [flags] Aliases: images, images Flags: -h, --help help for images -t, --tree Return the output as a tree Global Flags: -c, --config string Configuration file location path init Stevedore init command is a shortcut for ‘stevedore create configuration’\npromote Stevedore command to promote, publish or copy images to a docker registry or namespace\nUsage: stevedore promote [flags] Aliases: promote, publish Flags: -D, --dry-run Dry run show the promote parameters -S, --enable-semver-tags Generate extra tags based on semantic version tree when main version is semver 2.0.0 compliance -h, --help help for promote -i, --promote-image-name string Name for the image to be promoted -n, --promote-image-namespace string Registry's mamespace for the image to be promoted -r, --promote-image-registry string Registry's host for the image to be promoted -t, --promote-image-tag strings Extra tag for the image to be promoted -R, --remove-promote-tags Remove remoted tags from local docker host -T, --semver-tags-template strings List templates to generate tags following semantic version expression Global Flags: -c, --config string Configuration file location path version Stevedore command to print the binary release version\n","categories":"","description":"This page shows the Stevedore's available commands \n","excerpt":"This page shows the Stevedore's available commands \n","ref":"/docs/docs-v0.10/reference-guide/cli/","tags":["reference","cli"],"title":"Command line interface"},{"body":"Credentials allow users to securely store authentication information, such as access keys, tokens, passwords, and SSH keys. These credentials can be used to authenticate with Docker registries and Git servers, allowing users to push and pull images and code securely and with ease.\nStevedore uses the credentials store to persist and retrieve credentials during the Docker building process.\nCredentials keywords reference A credential is a data structure with a defined schema. Although it is possible to create a credential manually, it is recommended to use the Stevedore CLI to ensure that the credential follows the correct schema.\nThe following table describes the credentials attributes.\nKeyword Type Description Default value aws_access_key_id string Is the AWS Access Key ID, a unique identifier for the AWS account that is used to authenticate and authorize API requests made to AWS services. - aws_region string Specifies the AWS region associated with the credentials. The region is used to route requests to the appropriate endpoint for the resource. - aws_role_arn bool Specifies the Amazon Resource Name (ARN) of the IAM role to assume when using the credentials. This attribute is expected to be used when the aws_use_default_credentials_chain attribute is set to true. false aws_secret_access_key string This is a sensitive credential attribute that represents the Secret Access Key associated with an AWS account. - aws_profile string This is the name of the AWS profile to use when authenticating with AWS. - aws_shared_credentials_files list(string) Specifies the path to the shared credentials file to use. This attribute is expected to be used when the aws_use_default_credentials_chain attribute is set to true. - aws_shared_config_files list(string) Is a list of shared config files to use. It is used when aws_use_default_credentials_chain attribute is set to true. - aws_use_default_credentials_chain bool When set to true, enables the use of the default credentials chain provided by the AWS SDK. This chain specifies a series of possible locations and methods for the SDK to find and use credentials, such as environment variables, shared credential files, or IAM roles. By setting this attribute to true, you can leverage the same default behaviour used by the SDK to automatically discover and load credentials, without having to manually specify each one. For more information on the default credentials chain, you can refer to the official AWS SDK documentation at https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials. false docker_login_password string DEPRECATED: It will be removed on version 0.12.0\nPassword password for basic auth method. - docker_login_username string DEPRECATED: It will be removed on version 0.12.0\nUsername username for basic auth method. - id string Is the credential identifier. - password string This attribute provides the password for the basic authentication method. It can be used to authenticate with either a Docker registry or a Git server, allowing Stevedore to securely access and retrieve the required resources. - username string The username attribute is used for basic authentication and provides the username to authenticate with either a Docker registry or a Git server. - private_key_file string The private_key_file attribute is used to provide the path to the private key file used for authentication to a Git server. - private_key_password string Holds the password for the private key file, which can be used to authenticate to a Git server. - git_ssh_user string The username to use when authenticating via SSH to a Git server. git use_ssh_agent bool It must be set to true when you allow using the ssh-agent to authenticate to the Git server. false ","categories":"","description":"Load the credentials you require to the store to build Docker images\n","excerpt":"Load the credentials you require to the store to build Docker images\n","ref":"/docs/docs-v0.11/reference-guide/credentials/","tags":["credentials"],"title":"Credentials"},{"body":"Credentials allow users to securely store authentication information, such as access keys, tokens, passwords, and SSH keys. These credentials can be used to authenticate with Docker registries and Git servers, allowing users to push and pull images and code securely and with ease.\nStevedore uses the credentials store to persist and retrieve credentials during the Docker building process.\nCredentials keywords reference A credential is a data structure with a defined schema. Although it is possible to create a credential manually, it is recommended to use the Stevedore CLI to ensure that the credential follows the correct schema.\nThe following table describes the credentials attributes.\nKeyword Type Description Default value aws_access_key_id string Is the AWS Access Key ID, a unique identifier for the AWS account that is used to authenticate and authorize API requests made to AWS services. - aws_region string Specifies the AWS region associated with the credentials. The region is used to route requests to the appropriate endpoint for the resource. - aws_role_arn bool Specifies the Amazon Resource Name (ARN) of the IAM role to assume when using the credentials. This attribute is expected to be used when the aws_use_default_credentials_chain attribute is set to true. false aws_secret_access_key string This is a sensitive credential attribute that represents the Secret Access Key associated with an AWS account. - aws_profile string This is the name of the AWS profile to use when authenticating with AWS. - aws_shared_credentials_files list(string) Specifies the path to the shared credentials file to use. This attribute is expected to be used when the aws_use_default_credentials_chain attribute is set to true. - aws_shared_config_files list(string) Is a list of shared config files to use. It is used when aws_use_default_credentials_chain attribute is set to true. - aws_use_default_credentials_chain bool When set to true, enables the use of the default credentials chain provided by the AWS SDK. This chain specifies a series of possible locations and methods for the SDK to find and use credentials, such as environment variables, shared credential files, or IAM roles. By setting this attribute to true, you can leverage the same default behaviour used by the SDK to automatically discover and load credentials, without having to manually specify each one. For more information on the default credentials chain, you can refer to the official AWS SDK documentation at https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/#specifying-credentials. false docker_login_password string DEPRECATED: It will be removed on version 0.12.0\nPassword password for basic auth method. - docker_login_username string DEPRECATED: It will be removed on version 0.12.0\nUsername username for basic auth method. - id string Is the credential identifier. - password string This attribute provides the password for the basic authentication method. It can be used to authenticate with either a Docker registry or a Git server, allowing Stevedore to securely access and retrieve the required resources. - username string The username attribute is used for basic authentication and provides the username to authenticate with either a Docker registry or a Git server. - private_key_file string The private_key_file attribute is used to provide the path to the private key file used for authentication to a Git server. - private_key_password string Holds the password for the private key file, which can be used to authenticate to a Git server. - git_ssh_user string The username to use when authenticating via SSH to a Git server. git use_ssh_agent bool It must be set to true when you allow using the ssh-agent to authenticate to the Git server. false ","categories":"","description":"Load the credentials you require to the store to build Docker images\n","excerpt":"Load the credentials you require to the store to build Docker images\n","ref":"/docs/reference-guide/credentials/","tags":["credentials"],"title":"Credentials"},{"body":"The credential store in Stevedore allows users to securely persist and retrieve credentials during the Docker image building process.\nCredentials would be used either to pull parent images or to push the outcome image after the build. Another use case for the credentials is when you want to get authorized to a Git server to use a repository as Docker build context.\nStorage type Stevedore offers two types of storage for credentials: local storage, which persists the credentials on the user’s local disk, and envvars storage, which stores the credentials as environment variables.\nThe storage type used by default is local storage. And credentials are stored in the credentials folder in your current working directory.\nLocal storage To store the credentials locally on your disk, set the storage_type attribute in the credential configuration to local.\nThere you can also set the location to store the credentials. To configure that, use the local_storage_path attribute.\nLocal storage allows the encryption of the credential. Whenever you set the encryption_key in the credentials configuration, local storage will be encrypted. Each credential is encrypted individually and stored in a file within the credentials storage path.\nEnvvars storage Another option for storing credentials in Stevedore is using the envvars storage type. To do so, you can set the storage_type attribute in the credential configuration to envvars.\nWhen using envvars storage, credentials are stored as environment variables. This can be particularly useful when working with systems that rely on environment variables, such as continuous integration (CI) or deployment pipelines.\nFor security concerns, envvars storage encrypts each credential, therefore it needs you to set the encryption_key in the credentials configuration.\nTo create a new credential when using the envvars storage type, you must use the Stevedore CLI create credentials command. However, please note that this command does not automatically create the corresponding environment variable on your system. Instead, the command will output the environment variable name and value that you will need to create manually.\nIt’s also important to note that credentials stored using envvars storage are not persisted between sessions. This means that if you close your terminal session or restart your machine, you will need to set the credentials again.\nStevedore creates the environment variables to store a credential prefixed by STEVEDORE_ENVVARS_CREDENTIALS and the name is followed by the hash of the credentials id.\nThat is an example of an environment variable that stores a credential.\nSTEVEDORE_ENVVARS_CREDENTIALS_82E99D42EE1191BB42FBFB444920104D=4c1cedd441cd45f8aca66d6e9bfc81... Security The credentials store uses AES-GCM (Galois Counter Mode) encryption to securely store each credential before storing it.\nAES-GCM is recommended for securing data at rest because it is a strong encryption algorithm that provides both confidentiality and integrity of the data. It is widely used in various security standards such as FIPS 140-2, which is a US government standard for cryptographic modules, and it is also recommended by NIST (National Institute of Standards and Technology) for use in data encryption.\nAdditionally, to ensure that the encryption key used is robust, Stevedore generates a hash of the provided credential key, which is used as the encryption key. By using this approach, we can guarantee that the encryption key has 32 characters in length.\n","categories":"","description":"Store and retrieve credentials\n","excerpt":"Store and retrieve credentials\n","ref":"/docs/docs-v0.11/reference-guide/credentials/credentials-store/","tags":["credentials"],"title":"Credentials store"},{"body":"The credential store in Stevedore allows users to securely persist and retrieve credentials during the Docker image building process.\nCredentials would be used either to pull parent images or to push the outcome image after the build. Another use case for the credentials is when you want to get authorized to a Git server to use a repository as Docker build context.\nStorage type Stevedore offers two types of storage for credentials: local storage, which persists the credentials on the user’s local disk, and envvars storage, which stores the credentials as environment variables.\nThe storage type used by default is local storage. And credentials are stored in the credentials folder in your current working directory.\nLocal storage To store the credentials locally on your disk, set the storage_type attribute in the credential configuration to local.\nThere you can also set the location to store the credentials. To configure that, use the local_storage_path attribute.\nLocal storage allows the encryption of the credential. Whenever you set the encryption_key in the credentials configuration, local storage will be encrypted. Each credential is encrypted individually and stored in a file within the credentials storage path.\nEnvvars storage Another option for storing credentials in Stevedore is using the envvars storage type. To do so, you can set the storage_type attribute in the credential configuration to envvars.\nWhen using envvars storage, credentials are stored as environment variables. This can be particularly useful when working with systems that rely on environment variables, such as continuous integration (CI) or deployment pipelines.\nFor security concerns, envvars storage encrypts each credential, therefore it needs you to set the encryption_key in the credentials configuration.\nTo create a new credential when using the envvars storage type, you must use the Stevedore CLI create credentials command. However, please note that this command does not automatically create the corresponding environment variable on your system. Instead, the command will output the environment variable name and value that you will need to create manually.\nIt’s also important to note that credentials stored using envvars storage are not persisted between sessions. This means that if you close your terminal session or restart your machine, you will need to set the credentials again.\nStevedore creates the environment variables to store a credential prefixed by STEVEDORE_ENVVARS_CREDENTIALS and the name is followed by the hash of the credentials id.\nThat is an example of an environment variable that stores a credential.\nSTEVEDORE_ENVVARS_CREDENTIALS_82E99D42EE1191BB42FBFB444920104D=4c1cedd441cd45f8aca66d6e9bfc81... Security The credentials store uses AES-GCM (Galois Counter Mode) encryption to securely store each credential before storing it.\nAES-GCM is recommended for securing data at rest because it is a strong encryption algorithm that provides both confidentiality and integrity of the data. It is widely used in various security standards such as FIPS 140-2, which is a US government standard for cryptographic modules, and it is also recommended by NIST (National Institute of Standards and Technology) for use in data encryption.\nAdditionally, to ensure that the encryption key used is robust, Stevedore generates a hash of the provided credential key, which is used as the encryption key. By using this approach, we can guarantee that the encryption key has 32 characters in length.\n","categories":"","description":"Store and retrieve credentials\n","excerpt":"Store and retrieve credentials\n","ref":"/docs/reference-guide/credentials/credentials-store/","tags":["credentials"],"title":"Credentials store"},{"body":"build Stevedore command to build images.\nUsage: stevedore build \u003cimage\u003e [flags] Examples: stevedore build ubuntu-base --image-version impish --tag 21.10 --pull-parent-image --push-after-build --remove-local-images-after-push Flags: --ansible-connection-local When this flag is enabled, ansible uses local connection [only applies to ansible-playbook driver] --ansible-intermediate-container-name string Name of an intermediate container that can be used during ansible build process [only applies to ansible-playbook driver] --ansible-inventory-path string Specify inventory hosts' path or comma separated list of hosts [only applies to ansible-playbook driver] --ansible-limit string Further limit selected hosts to an additional pattern [only applies to ansible-playbook driver] --build-on-cascade When this flag is enabled, children images are also built --builder-name string [DEPRECATED FLAG] use 'ansible-intermediate-container-name' instead of 'builder-name' --cascade [DEPRECATED FLAG] use 'build-on-cascade' instead of 'cascade' --cascade-depth int Number children levels to build when build on cascade is executed (default -1) --concurrency int Number of images builds that can be excuted at the same time --connection-local [DEPRECATED FLAG] use 'ansible-connection-local' instead of 'connection-local' --dry-run When this flag is enabled, the built is executed in dry-run mode --enable-semver-tags When this flag is enabled, and main version is semver 2.0.0 compliance extra tag are created based on the semantic version tree -h, --help help for build --image-from string [DEPRECATED FLAG] use 'image-from-name' instead of 'image-from' -I, --image-from-name string Image parent's name (default \"-\") -N, --image-from-namespace string Image parent's registry namespace (default \"-\") -R, --image-from-registry string Image parent's registry host (default \"-\") -V, --image-from-version string Image parent's version (default \"-\") -i, --image-name string Image name. Its value overrides the name on the images tree definition (default \"-\") -r, --image-registry-host string Image registry host (default \"-\") -n, --image-registry-namespace string Image namespace (default \"-\") -v, --image-version strings List of versions to build --inventory string [DEPRECATED FLAG] use 'ansible-inventory-path' instead of 'inventory' -l, --label strings List of labels to assign to the image --limit string [DEPRECATED FLAG] use 'ansible-limit' instead of 'limit' --namespace string [DEPRECATED FLAG] use 'image-registry-namespace' instead of 'namespace' --no-push [DEPRECATED FLAG] 'no-push' is the stevedore default behaviour, use --push-after-build to push an image --num-workers int [DEPRECATED FLAG] use 'concurrency' instead of 'num-workers' -L, --persistent-label strings List of persistent labels to set during the build process. Persistent labels inherited from parent has precedence over the current ones. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -p, --persistent-variable strings List of persistent variables to set during the build process. Persistent variable inherited from parent has precedence over the current ones. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e --pull-parent-image When this flag is enabled, parent image is pulled from docker registry --push-after-build When this flag is enabled, the image is pushed to docker registry after the build --registry string [DEPRECATED FLAG] use 'image-registry-host' instead of 'registry' --remove-local-images-after-push When this flag is enabled, images are removed from local after push -T, --semver-tags-template strings List of templates to generate tags following semantic version expression --set strings [DEPRECATED FLAG] use 'variable' instead of 'set' --set-persistent strings [DEPRECATED FLAG] use 'persistent-variable' instead of 'set-persistent' -t, --tag strings List of extra tags to generate --use-docker-normalized-name Use Docker normalized name references -x, --variable strings Variables to set during the build process. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e Global Flags: -c, --config string Configuration file location path --debug Enable debug mode completion Stevedore command to generate shell completions. Here you could find more details about the completion.\nUsage: stevedore completion [flags] Flags: -h, --help help for completion Global Flags: -c, --config string Configuration file location path --debug Enable debug mode To load stevedore completion run\n$ . \u003c(stevedore completion) To configure your bash shell to load completions for each session add to your bashrc\n# ~/.bashrc or ~/.profile . \u003c(stevedore completion) create Stevedore command to create items.\nUsage: stevedore create [flags] stevedore create [command] Aliases: create, generate Available Commands: configuration Stevedore subcommand to create and initizalize the configuration credentials Stevedore subcommand to create a credentials badge to credentials store Flags: -h, --help help for create Global Flags: -c, --config string Configuration file location path --debug Enable debug mode Use \"stevedore create [command] --help\" for more information about a command. create configuration Stevedore subcommand to create and initialize the configuration.\nUsage: stevedore create configuration [flags] Aliases: configuration, config, conf, cfg Examples: Example setting all configuration parameters: stevedore create configuration --builders-path /builders --concurrency 4 --config /stevedore-config.yaml --credentials-format json --credentials-local-storage-path /credentials --credentials-storage-type local --enable-semver-tags --force --images-path /images --log-path-file /logs --push-images --semver-tags-template \"{{ .Major }}\" --semver-tags-template \"{{ .Major }}_{{ .Minor }}\" Flags: -b, --builders-path string It defines the path to locate the builders definition. Its default value is 'stevedore.yaml' (default \"stevedore.yaml\") -c, --concurrency int It defines the number of concurrent workers created to build images. Its default value is '4' (default 4) -C, --config string Configuration file location path --credentials-encryption-key string Is the encryption key used on the credentials store --credentials-format string Format used to store credentials. The accepted formats are: json and yaml (default \"json\") --credentials-local-storage-path string When is used the 'local' storage, it defines the path to store the credentials. Its default value is 'credentials' (default \"credentials\") --credentials-storage-type string It defines the storage type. Its default value is 'local' (default \"local\") -s, --enable-semver-tags Generate extra tags when the main image tags is semver 2.0.0 compliance. Its default value is 'false' --force Force to create configuration file when the file already exists --generate-credentials-encryption-key It creates a random encryption key for the credentials store -h, --help help for configuration -i, --images-path string It defines the path to locate the images definition. Its default value is 'stevedore.yaml' (default \"stevedore.yaml\") -l, --log-path-file string Log file location path. Its default value is '' -p, --push-images On build, push images automatically after it finishes. Its default value is 'false' -t, --semver-tags-template strings List of templates which define those extra tags to generate when 'semantic_version_tags_enabled' is enabled. Its default value is '[{{ .Major }}.{{ .Minor }}.{{ .Patch }}]' (default [{{ .Major }}.{{ .Minor }}.{{ .Patch }}]) Global Flags: --debug Enable debug mode create credentials Stevedore subcommand to add a credential to the credentials store.\nUsage: stevedore create credentials [flags] Aliases: credentials, auth, badge Examples: Create credentials to authenticate through basic auth into a private registry: stevedore create credentials myregistry --username username Create credentials to achieve credentials from AWS ECR using the default credentials chain: stevedore create credentials ecr-host --aws-region eu-west-1 --aws-use-default-credentials-chain Flags: --allow-use-ssh-agent When this flag is enabled, is allowed to use ssh-agent --ask-private-key-password When this flag is enabled, you will be asked for a private key password --aws-access-key-id string AWS Access Key ID to achieve credentials from AWS to achieve credentials from AWS. AWS Secret asked key is going to be requested --aws-profile string AWS Profile to achieve credentials from AWS --aws-region string AWS Region to achieve credentials from AWS --aws-role-arn string AWS Role ARN to achieve credentials from AWS --aws-shared-config-files strings List of AWS shared config files to achieve credentials from AWS --aws-shared-credentials-files strings List AWS shared credentials files to achieve credentials from AWS --aws-use-default-credentials-chain When is used that flag, AWS default credentials chain is used to achieve credentials from AWS -d, --credentials-dir string [DEPRECATED FLAG] 'credentials-dir' is deprecated and will be ignored. Credentials parameters are set through the 'credentials' section of the configuration file or using the flag 'local-storage-path' --force When this flag is enabled, credentials creation is forced. It overwrites the existing value --git-ssh-user string Git SSH User -h, --help help for credentials --local-storage-path string Path where credentials are stored locally, using local storage type --private-key-file string Private Key File -r, --registry-host string [DEPRECATED FLAG] credentials id must be passed as command argument instead of using 'registry-host' flag --username string Username for basic auth method. Password is going to be requested Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get Stevedore command to get items information.\nUsage: stevedore get [flags] stevedore get [command] Aliases: get, list Available Commands: builders Stevedore subcommand to get builders information configuration Stevedore subcommand to get configuration information credentials Stevedore subcommand to get credentials information images Stevedore subcommand that show detail about images definition Flags: -h, --help help for get Global Flags: -c, --config string Configuration file location path --debug Enable debug mode Use \"stevedore get [command] --help\" for more information about a command. get builders Stevedore subcommand to get builders information.\nUsage: stevedore get builders [flags] Aliases: builders, builder, b Examples: Get builder filtered by name: stevedore get images --filter name=golang-app Get builder filtered by driver: stevedore get images --filter driver=docker Flags: -f, --filter strings List of filters to apply. Filters must be defined on the following format: \u003cattribute\u003e=\u003cvalue\u003e -h, --help help for builders Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get configuration Stevedore subcommand to get configuration information.\nUsage: stevedore get configuration [flags] Aliases: configuration, config, conf, cfg Examples: stevedore get configuration Flags: -h, --help help for configuration Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get credentials Stevedore subcommand to get credentials information.\nUsage: stevedore get credentials [flags] Aliases: credentials, auth, auths, cred, creds, credential Example: stevedore get credentials Flags: -h, --help help for credentials --show-secrets When this flag is enabled, the output provide secrets Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get images Stevedore subcommand that shows detail about the defined images.\nUsage: stevedore get images [flags] Aliases: images, image, i, img Examples: Get images filtered by name: stevedore get images --filter name=app1 Get images filtered by registry: stevedore get images --filter registry=registry.test Flags: -f, --filter strings List of filters to apply. Filters must be defined on the following format: \u003cattribute\u003e=\u003cvalue\u003e -h, --help help for images -t, --tree When this flag is enabled, output is returned in tree format --use-docker-normalized-name Use Docker normalized name references Global Flags: -c, --config string Configuration file location path --debug Enable debug mode init Stevedore init command is an alias for stevedore create configuration command.\npromote Stevedore command to promote, publish or copy images to a docker registry or namespace.\nUsage: stevedore promote [flags] Aliases: promote, publish, copy Examples: stevedore promote ubuntu:impish --romote-image-registry myregistry.example.com --promote-image-namespace mynamespace Flags: -D, --dry-run Dry run promotion -S, --enable-semver-tags When this flag is enabled, and main version is semver 2.0.0 compliance extra tag are created based on the semantic version tree -s, --force-promote-source-image When this flag is enabled, the source image is also promoted, along with any other target image -h, --help help for promote -i, --promote-image-name string Target image name (default \"-\") -r, --promote-image-registry-host string Target image registry host (default \"-\") -n, --promote-image-registry-namespace string Target image registry mamespace (default \"-\") -t, --promote-image-tag strings List of target image tags --remove-local-images-after-push When this flag is enabled, images are removed from local after push --remove-promote-tags remove-local-images-after-push [DEPRECATED FLAG] use remove-local-images-after-push instead of `remove-promote-tags` -T, --semver-tags-template strings List templates to generate tags following semantic version expression --use-docker-normalized-name Use Docker normalized name references -R, --use-source-image-from-remote When this flag is enabled, source images is downloaded from remote Docker registry Global Flags: -c, --config string Configuration file location path --debug Enable debug mode version Stevedore command to print the binary release version.\nUsage: stevedore version [flags] Flags: -h, --help help for version Global Flags: -c, --config string Configuration file location path --debug Enable debug mode ","categories":"","description":"This page shows the Stevedore's available commands \n","excerpt":"This page shows the Stevedore's available commands \n","ref":"/docs/docs-v0.11/reference-guide/cli/","tags":["reference","cli"],"title":"Command line interface"},{"body":"build Stevedore command to build images.\nUsage: stevedore build \u003cimage\u003e [flags] Examples: stevedore build ubuntu-base --image-version impish --tag 21.10 --pull-parent-image --push-after-build --remove-local-images-after-push Flags: --ansible-connection-local When this flag is enabled, ansible uses local connection [only applies to ansible-playbook driver] --ansible-intermediate-container-name string Name of an intermediate container that can be used during ansible build process [only applies to ansible-playbook driver] --ansible-inventory-path string Specify inventory hosts' path or comma separated list of hosts [only applies to ansible-playbook driver] --ansible-limit string Further limit selected hosts to an additional pattern [only applies to ansible-playbook driver] --build-on-cascade When this flag is enabled, children images are also built --builder-name string [DEPRECATED FLAG] use 'ansible-intermediate-container-name' instead of 'builder-name' --cascade [DEPRECATED FLAG] use 'build-on-cascade' instead of 'cascade' --cascade-depth int Number children levels to build when build on cascade is executed (default -1) --concurrency int Number of images builds that can be excuted at the same time --connection-local [DEPRECATED FLAG] use 'ansible-connection-local' instead of 'connection-local' --dry-run When this flag is enabled, the built is executed in dry-run mode --enable-semver-tags When this flag is enabled, and main version is semver 2.0.0 compliance extra tag are created based on the semantic version tree -h, --help help for build --image-from string [DEPRECATED FLAG] use 'image-from-name' instead of 'image-from' -I, --image-from-name string Image parent's name (default \"-\") -N, --image-from-namespace string Image parent's registry namespace (default \"-\") -R, --image-from-registry string Image parent's registry host (default \"-\") -V, --image-from-version string Image parent's version (default \"-\") -i, --image-name string Image name. Its value overrides the name on the images tree definition (default \"-\") -r, --image-registry-host string Image registry host (default \"-\") -n, --image-registry-namespace string Image namespace (default \"-\") -v, --image-version strings List of versions to build --inventory string [DEPRECATED FLAG] use 'ansible-inventory-path' instead of 'inventory' -l, --label strings List of labels to assign to the image --limit string [DEPRECATED FLAG] use 'ansible-limit' instead of 'limit' --namespace string [DEPRECATED FLAG] use 'image-registry-namespace' instead of 'namespace' --no-push [DEPRECATED FLAG] 'no-push' is the stevedore default behaviour, use --push-after-build to push an image --num-workers int [DEPRECATED FLAG] use 'concurrency' instead of 'num-workers' -L, --persistent-label strings List of persistent labels to set during the build process. Persistent labels inherited from parent has precedence over the current ones. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -p, --persistent-variable strings List of persistent variables to set during the build process. Persistent variable inherited from parent has precedence over the current ones. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e --pull-parent-image When this flag is enabled, parent image is pulled from docker registry --push-after-build When this flag is enabled, the image is pushed to docker registry after the build --registry string [DEPRECATED FLAG] use 'image-registry-host' instead of 'registry' --remove-local-images-after-push When this flag is enabled, images are removed from local after push -T, --semver-tags-template strings List of templates to generate tags following semantic version expression --set strings [DEPRECATED FLAG] use 'variable' instead of 'set' --set-persistent strings [DEPRECATED FLAG] use 'persistent-variable' instead of 'set-persistent' -t, --tag strings List of extra tags to generate --use-docker-normalized-name Use Docker normalized name references -x, --variable strings Variables to set during the build process. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e Global Flags: -c, --config string Configuration file location path --debug Enable debug mode completion Stevedore command to generate shell completions. Here you could find more details about the completion.\nUsage: stevedore completion [flags] Flags: -h, --help help for completion Global Flags: -c, --config string Configuration file location path --debug Enable debug mode To load stevedore completion run\n$ . \u003c(stevedore completion) To configure your bash shell to load completions for each session add to your bashrc\n# ~/.bashrc or ~/.profile . \u003c(stevedore completion) create Stevedore command to create items.\nUsage: stevedore create [flags] stevedore create [command] Aliases: create, generate Available Commands: configuration Stevedore subcommand to create and initizalize the configuration credentials Stevedore subcommand to create a credentials badge to credentials store Flags: -h, --help help for create Global Flags: -c, --config string Configuration file location path --debug Enable debug mode Use \"stevedore create [command] --help\" for more information about a command. create configuration Stevedore subcommand to create and initialize the configuration.\nUsage: stevedore create configuration [flags] Aliases: configuration, config, conf, cfg Examples: Example setting all configuration parameters: stevedore create configuration --builders-path /builders --concurrency 4 --config /stevedore-config.yaml --credentials-format json --credentials-local-storage-path /credentials --credentials-storage-type local --enable-semver-tags --force --images-path /images --log-path-file /logs --push-images --semver-tags-template \"{{ .Major }}\" --semver-tags-template \"{{ .Major }}_{{ .Minor }}\" Flags: -b, --builders-path string It defines the path to locate the builders definition. Its default value is 'stevedore.yaml' (default \"stevedore.yaml\") -c, --concurrency int It defines the number of concurrent workers created to build images. Its default value is '4' (default 4) -C, --config string Configuration file location path --credentials-encryption-key string Is the encryption key used on the credentials store --credentials-format string Format used to store credentials. The accepted formats are: json and yaml (default \"json\") --credentials-local-storage-path string When is used the 'local' storage, it defines the path to store the credentials. Its default value is 'credentials' (default \"credentials\") --credentials-storage-type string It defines the storage type. Its default value is 'local' (default \"local\") -s, --enable-semver-tags Generate extra tags when the main image tags is semver 2.0.0 compliance. Its default value is 'false' --force Force to create configuration file when the file already exists --generate-credentials-encryption-key It creates a random encryption key for the credentials store -h, --help help for configuration -i, --images-path string It defines the path to locate the images definition. Its default value is 'stevedore.yaml' (default \"stevedore.yaml\") -l, --log-path-file string Log file location path. Its default value is '' -p, --push-images On build, push images automatically after it finishes. Its default value is 'false' -t, --semver-tags-template strings List of templates which define those extra tags to generate when 'semantic_version_tags_enabled' is enabled. Its default value is '[{{ .Major }}.{{ .Minor }}.{{ .Patch }}]' (default [{{ .Major }}.{{ .Minor }}.{{ .Patch }}]) Global Flags: --debug Enable debug mode create credentials Stevedore subcommand to add a credential to the credentials store.\nUsage: stevedore create credentials [flags] Aliases: credentials, auth, badge Examples: Create credentials to authenticate through basic auth into a private registry: stevedore create credentials myregistry --username username Create credentials to achieve credentials from AWS ECR using the default credentials chain: stevedore create credentials ecr-host --aws-region eu-west-1 --aws-use-default-credentials-chain Flags: --allow-use-ssh-agent When this flag is enabled, is allowed to use ssh-agent --ask-private-key-password When this flag is enabled, you will be asked for a private key password --aws-access-key-id string AWS Access Key ID to achieve credentials from AWS to achieve credentials from AWS. AWS Secret asked key is going to be requested --aws-profile string AWS Profile to achieve credentials from AWS --aws-region string AWS Region to achieve credentials from AWS --aws-role-arn string AWS Role ARN to achieve credentials from AWS --aws-shared-config-files strings List of AWS shared config files to achieve credentials from AWS --aws-shared-credentials-files strings List AWS shared credentials files to achieve credentials from AWS --aws-use-default-credentials-chain When is used that flag, AWS default credentials chain is used to achieve credentials from AWS -d, --credentials-dir string [DEPRECATED FLAG] 'credentials-dir' is deprecated and will be ignored. Credentials parameters are set through the 'credentials' section of the configuration file or using the flag 'local-storage-path' --force When this flag is enabled, credentials creation is forced. It overwrites the existing value --git-ssh-user string Git SSH User -h, --help help for credentials --local-storage-path string Path where credentials are stored locally, using local storage type --private-key-file string Private Key File -r, --registry-host string [DEPRECATED FLAG] credentials id must be passed as command argument instead of using 'registry-host' flag --username string Username for basic auth method. Password is going to be requested Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get Stevedore command to get items information.\nUsage: stevedore get [flags] stevedore get [command] Aliases: get, list Available Commands: builders Stevedore subcommand to get builders information configuration Stevedore subcommand to get configuration information credentials Stevedore subcommand to get credentials information images Stevedore subcommand that show detail about images definition Flags: -h, --help help for get Global Flags: -c, --config string Configuration file location path --debug Enable debug mode Use \"stevedore get [command] --help\" for more information about a command. get builders Stevedore subcommand to get builders information.\nUsage: stevedore get builders [flags] Aliases: builders, builder, b Examples: Get builder filtered by name: stevedore get images --filter name=golang-app Get builder filtered by driver: stevedore get images --filter driver=docker Flags: -f, --filter strings List of filters to apply. Filters must be defined on the following format: \u003cattribute\u003e=\u003cvalue\u003e -h, --help help for builders Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get configuration Stevedore subcommand to get configuration information.\nUsage: stevedore get configuration [flags] Aliases: configuration, config, conf, cfg Examples: stevedore get configuration Flags: -h, --help help for configuration Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get credentials Stevedore subcommand to get credentials information.\nUsage: stevedore get credentials [flags] Aliases: credentials, auth, auths, cred, creds, credential Example: stevedore get credentials Flags: -h, --help help for credentials --show-secrets When this flag is enabled, the output provide secrets Global Flags: -c, --config string Configuration file location path --debug Enable debug mode get images Stevedore subcommand that shows detail about the defined images.\nUsage: stevedore get images [flags] Aliases: images, image, i, img Examples: Get images filtered by name: stevedore get images --filter name=app1 Get images filtered by registry: stevedore get images --filter registry=registry.test Flags: -f, --filter strings List of filters to apply. Filters must be defined on the following format: \u003cattribute\u003e=\u003cvalue\u003e -h, --help help for images -t, --tree When this flag is enabled, output is returned in tree format --use-docker-normalized-name Use Docker normalized name references Global Flags: -c, --config string Configuration file location path --debug Enable debug mode init Stevedore init command is an alias for stevedore create configuration command.\npromote Stevedore command to promote, publish or copy images to a docker registry or namespace.\nUsage: stevedore promote [flags] Aliases: promote, publish, copy Examples: stevedore promote ubuntu:impish --romote-image-registry myregistry.example.com --promote-image-namespace mynamespace Flags: -D, --dry-run Dry run promotion -S, --enable-semver-tags When this flag is enabled, and main version is semver 2.0.0 compliance extra tag are created based on the semantic version tree -s, --force-promote-source-image When this flag is enabled, the source image is also promoted, along with any other target image -h, --help help for promote -i, --promote-image-name string Target image name (default \"-\") -r, --promote-image-registry-host string Target image registry host (default \"-\") -n, --promote-image-registry-namespace string Target image registry mamespace (default \"-\") -t, --promote-image-tag strings List of target image tags --remove-local-images-after-push When this flag is enabled, images are removed from local after push --remove-promote-tags remove-local-images-after-push [DEPRECATED FLAG] use remove-local-images-after-push instead of `remove-promote-tags` -T, --semver-tags-template strings List templates to generate tags following semantic version expression --use-docker-normalized-name Use Docker normalized name references -R, --use-source-image-from-remote When this flag is enabled, source images is downloaded from remote Docker registry Global Flags: -c, --config string Configuration file location path --debug Enable debug mode version Stevedore command to print the binary release version.\nUsage: stevedore version [flags] Flags: -h, --help help for version Global Flags: -c, --config string Configuration file location path --debug Enable debug mode ","categories":"","description":"This page shows the Stevedore's available commands \n","excerpt":"This page shows the Stevedore's available commands \n","ref":"/docs/reference-guide/cli/","tags":["reference","cli"],"title":"Command line interface"},{"body":"Stevedore Project Code of Conduct The Stevedore project is committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, disability, ethnicity, religion, or similar personal characteristic.\nWe expect all contributors, users, and community members to follow this code of conduct. This includes all interactions within the Stevedore community, whether online, in person, or otherwise.\nCode of Conduct Be respectful and inclusive We encourage participation from everyone. Please be respectful and considerate towards others, and avoid any language, images, or actions that could be considered disrespectful, offensive, or exclusionary.\nListen and be open to constructive feedback Be open to constructive feedback and criticism from others. We all have room to learn, grow, and improve, and being open to feedback is an important part of that process.\nDon’t harass or discriminate Harassment or discrimination of any kind will not be tolerated. This includes but is not limited to derogatory comments or slurs, sexual harassment, and unwanted physical contact or attention. If you experience or witness any form of harassment or discrimination, please report it immediately.\nDon’t engage in disruptive behaviour Disruptive behaviour, such as spamming, trolling, or other malicious behaviour, will not be tolerated. We want to maintain a positive and productive environment for everyone.\nAcknowledgements This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n","categories":"","description":"Stevedore has a code of conduct that all contributors are expected to follow","excerpt":"Stevedore has a code of conduct that all contributors are expected to …","ref":"/docs/contribution-guidelines/code-of-conduct/","tags":"","title":"Code of conduct"},{"body":"Stevedore Project Code of Conduct The Stevedore project is committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, disability, ethnicity, religion, or similar personal characteristic.\nWe expect all contributors, users, and community members to follow this code of conduct. This includes all interactions within the Stevedore community, whether online, in person, or otherwise.\nCode of Conduct Be respectful and inclusive We encourage participation from everyone. Please be respectful and considerate towards others, and avoid any language, images, or actions that could be considered disrespectful, offensive, or exclusionary.\nListen and be open to constructive feedback Be open to constructive feedback and criticism from others. We all have room to learn, grow, and improve, and being open to feedback is an important part of that process.\nDon’t harass or discriminate Harassment or discrimination of any kind will not be tolerated. This includes but is not limited to derogatory comments or slurs, sexual harassment, and unwanted physical contact or attention. If you experience or witness any form of harassment or discrimination, please report it immediately.\nDon’t engage in disruptive behaviour Disruptive behaviour, such as spamming, trolling, or other malicious behaviour, will not be tolerated. We want to maintain a positive and productive environment for everyone.\nAcknowledgements This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n","categories":"","description":"Stevedore has a code of conduct that all contributors are expected to follow","excerpt":"Stevedore has a code of conduct that all contributors are expected to …","ref":"/docs/docs-v0.10/contribution-guidelines/code-of-conduct/","tags":"","title":"Code of conduct"},{"body":"Stevedore Project Code of Conduct The Stevedore project is committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, disability, ethnicity, religion, or similar personal characteristic.\nWe expect all contributors, users, and community members to follow this code of conduct. This includes all interactions within the Stevedore community, whether online, in person, or otherwise.\nCode of Conduct Be respectful and inclusive We encourage participation from everyone. Please be respectful and considerate towards others, and avoid any language, images, or actions that could be considered disrespectful, offensive, or exclusionary.\nListen and be open to constructive feedback Be open to constructive feedback and criticism from others. We all have room to learn, grow, and improve, and being open to feedback is an important part of that process.\nDon’t harass or discriminate Harassment or discrimination of any kind will not be tolerated. This includes but is not limited to derogatory comments or slurs, sexual harassment, and unwanted physical contact or attention. If you experience or witness any form of harassment or discrimination, please report it immediately.\nDon’t engage in disruptive behaviour Disruptive behaviour, such as spamming, trolling, or other malicious behaviour, will not be tolerated. We want to maintain a positive and productive environment for everyone.\nAcknowledgements This Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n","categories":"","description":"Stevedore has a code of conduct that all contributors are expected to follow","excerpt":"Stevedore has a code of conduct that all contributors are expected to …","ref":"/docs/docs-v0.11/contribution-guidelines/code-of-conduct/","tags":"","title":"Code of conduct"},{"body":"Contributing to Stevedore Thank you for your interest in contributing to Stevedore! All contributions are welcome, whether they are bug reports, feature requests, or code contributions.\nGetting Started Before contributing to Stevedore, you should:\nFork the repository. Clone the repository to your local machine. Set up a development environment. Create a new branch for your changes. How to Contribute Bug Reports If you find a bug in Stevedore, please report it by creating a new issue on our GitHub repository. Please include as much information as possible, including a description of the bug, the steps to reproduce it, and any error messages you received.\nFeature Requests If you have a feature request, please create a new issue on our GitHub repository. Please include a detailed description of the feature, as well as any relevant use cases or examples.\nCode Contributions If you would like to contribute code to Stevedore, please follow these steps:\nCreate a new branch for your changes. Make your changes. Submit a pull request. Please ensure that your code adheres to our coding standards, that all tests pass before submitting a pull request, and you update the project README, the documentation, and the RELEASE_NOTES.\nCoding Standards When contributing code to Stevedore, please adhere to the following coding standards:\nUse clear, descriptive variable and function names. Use comments to explain complex code. Follow the existing code style, including indentation and formatting. Write tests for your code. Issue Management We use GitHub to manage issues and feature requests. To report a bug or request a feature, please create a new issue on our GitHub repository.\nDocumentation Documentation is an important part of the Stevedore project, and we rely on contributions from our community to keep it up-to-date. If your contribution involves changes to the behaviour of the Stevedore project, please make sure to update the documentation accordingly. This could include updating the README file, adding or modifying usage examples, or creating new documentation pages as needed. We encourage all contributors to participate in improving the documentation, as it helps ensure that the project is accessible and useful to as many people as possible.\nThank You Thank you for your interest in contributing to Stevedore! All contributions are appreciated.\n","categories":"","description":"How to contribute to Stevedore","excerpt":"How to contribute to Stevedore","ref":"/docs/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"Contributing to Stevedore Thank you for your interest in contributing to Stevedore! All contributions are welcome, whether they are bug reports, feature requests, or code contributions.\nGetting Started Before contributing to Stevedore, you should:\nFork the repository. Clone the repository to your local machine. Set up a development environment. Create a new branch for your changes. How to Contribute Bug Reports If you find a bug in Stevedore, please report it by creating a new issue on our GitHub repository. Please include as much information as possible, including a description of the bug, the steps to reproduce it, and any error messages you received.\nFeature Requests If you have a feature request, please create a new issue on our GitHub repository. Please include a detailed description of the feature, as well as any relevant use cases or examples.\nCode Contributions If you would like to contribute code to Stevedore, please follow these steps:\nCreate a new branch for your changes. Make your changes. Submit a pull request. Please ensure that your code adheres to our coding standards and that all tests pass before submitting a pull request.\nCoding Standards When contributing code to Stevedore, please adhere to the following coding standards:\nUse clear, descriptive variable and function names. Use comments to explain complex code. Follow the existing code style, including indentation and formatting. Write tests for your code. Issue Management We use GitHub to manage issues and feature requests. To report a bug or request a feature, please create a new issue on our GitHub repository.\nDocumentation Documentation is an important part of the Stevedore project, and we rely on contributions from our community to keep it up-to-date. If your contribution involves changes to the behaviour of the Stevedore project, please make sure to update the documentation accordingly. This could include updating the README file, adding or modifying usage examples, or creating new documentation pages as needed. We encourage all contributors to participate in improving the documentation, as it helps ensure that the project is accessible and useful to as many people as possible.\nThank You Thank you for your interest in contributing to Stevedore! All contributions are appreciated.\n","categories":"","description":"How to contribute to Stevedore","excerpt":"How to contribute to Stevedore","ref":"/docs/docs-v0.10/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"Contributing to Stevedore Thank you for your interest in contributing to Stevedore! All contributions are welcome, whether they are bug reports, feature requests, or code contributions.\nGetting Started Before contributing to Stevedore, you should:\nFork the repository. Clone the repository to your local machine. Set up a development environment. Create a new branch for your changes. How to Contribute Bug Reports If you find a bug in Stevedore, please report it by creating a new issue on our GitHub repository. Please include as much information as possible, including a description of the bug, the steps to reproduce it, and any error messages you received.\nFeature Requests If you have a feature request, please create a new issue on our GitHub repository. Please include a detailed description of the feature, as well as any relevant use cases or examples.\nCode Contributions If you would like to contribute code to Stevedore, please follow these steps:\nCreate a new branch for your changes. Make your changes. Submit a pull request. Please ensure that your code adheres to our coding standards, that all tests pass before submitting a pull request, and you update the project README, the documentation, and the RELEASE_NOTES.\nCoding Standards When contributing code to Stevedore, please adhere to the following coding standards:\nUse clear, descriptive variable and function names. Use comments to explain complex code. Follow the existing code style, including indentation and formatting. Write tests for your code. Issue Management We use GitHub to manage issues and feature requests. To report a bug or request a feature, please create a new issue on our GitHub repository.\nDocumentation Documentation is an important part of the Stevedore project, and we rely on contributions from our community to keep it up-to-date. If your contribution involves changes to the behaviour of the Stevedore project, please make sure to update the documentation accordingly. This could include updating the README file, adding or modifying usage examples, or creating new documentation pages as needed. We encourage all contributors to participate in improving the documentation, as it helps ensure that the project is accessible and useful to as many people as possible.\nThank You Thank you for your interest in contributing to Stevedore! All contributions are appreciated.\n","categories":"","description":"How to contribute to Stevedore","excerpt":"How to contribute to Stevedore","ref":"/docs/docs-v0.11/contribution-guidelines/","tags":"","title":"Contribution Guidelines"},{"body":"Stevedore is a tool for building Docker images at scale, and it is not intended to replace Dockerfile or Buildkit. Instead, Stevedore can be used in conjunction with these tools to help streamline the process of building and promoting multiple Docker images.\nOne of the key benefits of using Stevedore is that it provides a consistent way to build Docker images and its descendant images, which can be helpful when dealing with large and complex projects that require multiple images. You can also create a more efficient and automated process for building and promoting Docker images.\nOverall, Stevedore is a useful tool for anyone who needs to build and manage large numbers of Docker images, and it can help to improve the experience of building and promoting Docker images at scale.\nWhy stevedore? Stevedore simplifies the building of Docker images in a standardized way, with the ability to define relationships between them.\nYou can build images from multiple sources, including local files and git repositories, and generate automatic tags for semantic versioning.\nStevedore also offers a credentials store for easy authentication to Docker registries and AWS ECR, making image promotion and pushing seamless.\nFeatures Standardize Build your Docker images in a standardized way. Create a Dockerfile and reuse it for as many use cases as needed\nRelatives build Automate the building of related Docker images by defining their relationships and dependencies\nCredentials Store credentials to log in to your Docker registry, AWS Elastic Container Registry or a Git server\nPromote Easily promote or copy Docker images from one registry to another using Stevedore’s image promotion feature\nSemver awareness Automatically generate tags for semantic version 2.0.0 when building Docker image\nMultiple build contexts Build your images using multiple build context sources. Use local files, a git repository or merge several sources\n","categories":"","description":"","excerpt":"Stevedore is a tool for building Docker images at scale, and it is not …","ref":"/docs/","tags":"","title":"Documentation"},{"body":"Stevedore is a tool for building Docker images at scale, and it is not intended to replace Dockerfile or Buildkit. Instead, Stevedore can be used in conjunction with these tools to help streamline the process of building and promoting multiple Docker images.\nOne of the key benefits of using Stevedore is that it provides a consistent and modular way to build Docker images, which can be helpful when dealing with large and complex projects that require multiple images. By using a set of “workers” to perform specific tasks during the build process, you can create a more efficient and automated process for building and promoting Docker images.\nOverall, Stevedore is a useful tool for anyone who needs to build and manage large numbers of Docker images, and it can help to improve the overall experience of building and promoting Docker images at scale.\nWhy stevedore? Stevedore simplifies the building of Docker images in a standardized way, with the ability to define relationships between them. You can build images from multiple sources, including local files and git repositories, and generate automatic tags for semantic versioning. Stevedore also offers a credentials store for easy authentication to Docker registries and AWS ECR, making image promotion and pushing seamless.\nFeatures Standardize Build your Docker images in a standardized way. Create a Dockerfile and reuse it for as many use cases as you need\nRelatives build Define Docker images relationship and build the relatives images automatically\nCredentials Store credentials to log in to your Docker registry, AWS Elastic Container Registry or a Git server\nPromote Promote or copy images among Docker registries. Promote from and to AWS Elastic Container Registry is also supported\nSemver awareness Generate tags automatically when the main tag is semantic version 2.0.0\nMultiple build contexts Build your images using multiple build context sources. Use local files, a git repository or merge several sources\n","categories":"","description":"Explore the documentation for Stevedore v0.10\n","excerpt":"Explore the documentation for Stevedore v0.10\n","ref":"/docs/docs-v0.10/","tags":"","title":"Documentation v0.10"},{"body":"Stevedore is a tool for building Docker images at scale, and it is not intended to replace Dockerfile or Buildkit. Instead, Stevedore can be used in conjunction with these tools to help streamline the process of building and promoting multiple Docker images.\nOne of the key benefits of using Stevedore is that it provides a consistent and modular way to build Docker images, which can be helpful when dealing with large and complex projects that require multiple images. By using a set of “workers” to perform specific tasks during the build process, you can create a more efficient and automated process for building and promoting Docker images.\nOverall, Stevedore is a useful tool for anyone who needs to build and manage large numbers of Docker images, and it can help to improve the experience of building and promoting Docker images at scale.\nWhy stevedore? Stevedore simplifies the building of Docker images in a standardized way, with the ability to define relationships between them.\nYou can build images from multiple sources, including local files and git repositories, and generate automatic tags for semantic versioning.\nStevedore also offers a credentials store for easy authentication to Docker registries and AWS ECR, making image promotion and pushing seamless.\nFeatures Standardize Build your Docker images in a standardized way. Create a Dockerfile and reuse it for as many use cases as needed\nRelatives build Automate the building of related Docker images by defining their relationships and dependencies\nCredentials Store credentials to log in to your Docker registry, AWS Elastic Container Registry or a Git server\nPromote Easily promote or copy Docker images from one registry to another using Stevedore’s image promotion feature\nSemver awareness Automatically generate tags for semantic version 2.0.0 when building Docker image\nMultiple build contexts Build your images using multiple build context sources. Use local files, a git repository or merge several sources\n","categories":"","description":"Explore the documentation for Stevedore v0.11\n","excerpt":"Explore the documentation for Stevedore v0.11\n","ref":"/docs/docs-v0.11/","tags":"","title":"Documentation v0.11"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/build/","tags":"","title":"build"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/configuration/","tags":"","title":"configuration"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/getting-started/","tags":"","title":"getting-started"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/images-tree/","tags":"","title":"images-tree"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/installation/","tags":"","title":"installation"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/promote/","tags":"","title":"promote"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/quickstart/","tags":"","title":"quickstart"},{"body":"Download and install stevedore Stevedore has been developed and tested on amd64 architecture and Linux os, for that reason the only available tarball is for amd64-Linux tarball. In case you are running another arch or os, you could build it from the source.\nInstall from tarball Achieve Stevedore’s tarball curl -sL https://github.com/gostevedore/stevedore/releases/download/v0.10.3/stevedore_v0.10.3_Linux-x86_64.tar.gz \u003e stevedore_v0.10.3_Linux-x86_64.tar.gz Untar the package tar xzfv stevedore_v0.10.3_Linux-x86_64.tar.gz You create a symlink to Stevedore’s binary ln -sf ${PWD}/stevedore /usr/local/bin/stevedore Install from source Clone Stevedore’s repository git clone https://github.com/gostevedore/stevedore.git Build Stevedore’s code make build You can run make tar to generate a tarball within the dist folder.\nUse Goreleaser to create a snapshot In case you want to use Goreleaser to generate a snapshot you can run make snapshot.\nInitialize the stevedore project stevedore init Usage:\nCreate stevedore configuration file Usage: stevedore init [flags] Aliases: init Flags: -C, --build-on-cascade On build, start children images building once an image build is finished. Its default value is 'false' -b, --builder-path-file string Builders location path. Its default value is 'stevedore.yaml' -d, --credentials-dir string Location path to store docker registry credentials. Its default value is 'credentials' -p, --credentials-password credentials-regristry Docker registry password. It is ignored unless credentials-regristry value is defined -r, --credentials-registry-host string Docker registry host to register credentials -u, --credentials-username credentials-regristry Docker registry username. It is ignored unless credentials-regristry value is defined -s, --enable-semver-tags Generate extra tags when the main image tags is semver 2.0.0 compliance. Its default value is 'false' --force Force to create configuration file when the file already exists -h, --help help for init -l, --log-path-file string Log file location path. Its default value is '/dev/null' -P, --no-push-images On build, push images automatically after it finishes. Its default value is 'true' -w, --num-workers int It defines the number of workers to build images which corresponds to the number of images that can be build concurrently. Its default value is '4' (default -1) -T, --semver-tags-template strings List of templates which define those extra tags to generate when 'semantic_version_tags_enabled' is enabled. Its default value is '{{ .Major }}.{{ .Minor }}.{{ .Patch }}' -t, --tree-path-file string Images tree location path. Its default value is 'stevedore.yaml' Global Flags: -c, --config string Configuration file location path Load credentials, in case you need stevedore create credentials Usage:\nCreate stevedore docker registry credentials Usage: stevedore create credentials [flags] Aliases: credentials, auth Flags: -d, --credentials-dir string Location path to store docker registry credentials (default \"/home/aleix/.config/stevedore/credentials\") -h, --help help for credentials -p, --password string Docker registry password -r, --registry-host string Docker registry host to register credentials -u, --username string Docker registry username Global Flags: -c, --config string Configuration file location path Define builders Refer to builders reference guide\nDefine the images tree Refer to images tree reference guide\nStart building stevedore build Usage:\nBuild images Usage: stevedore build \u003cimage\u003e [flags] Flags: -b, --builder-name string Intermediate builder's container name [only applies to ansible-playbook builders] -C, --cascade Build images on cascade. Children's image build is started once the image build finishes -d, --cascade-depth int Number images levels to build when build on cascade is executed (default -1) -L, --connection-local Use local connection for ansible [only applies to ansible-playbook builders] --debug Enable debug mode to show build options -D, --dry-run Run a dry-run build -S, --enable-semver-tags Generate a set of tags for the image based on the semantic version tree when main version is semver 2.0.0 compliance -h, --help help for build -I, --image-from string Image (FROM) parent's name -N, --image-from-namespace string Image (FROM) parent's registry namespace -R, --image-from-registry string Image (FROM) parent's registry host -V, --image-from-version string Image (FROM) parent's version -i, --image-name string Image name- It overrides image tree image name -v, --image-version strings Image versions to be built. One or more image versions could be built -H, --inventory string Specify inventory hosts' path or comma separated list of hosts [only applies to Ansible builders] -l, --limit string Further limit selected hosts to an additional pattern [only applies to Ansible builders] -n, --namespace string Image's registry namespace where image will be stored -P, --no-push Do not push the image to registry once it is built -w, --num-workers int Number of workers to execute builds -r, --registry string Image's registry host where image will be stored -T, --semver-tags-template strings List templates to generate tags following semantic version expression -s, --set strings Set variables to use during the build. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -p, --set-persistent strings Set persistent variables to use during the build. A persistent variable will be available on child image during its build and could not be overwrite. The format of each variable must be \u003ckey\u003e=\u003cvalue\u003e -t, --tag strings Give an extra tag for the docker image Global Flags: -c, --config string Configuration file location path ","categories":"","description":"This page describes how you can build your first bunch of Docker images with Stevedore\n","excerpt":"This page describes how you can build your first bunch of Docker …","ref":"/docs/docs-v0.10/getting-started/quickstart/","tags":["getting-started","quickstart","installation","configuration"],"title":"Quickstart"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/builder/","tags":"","title":"builder"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/cli/","tags":"","title":"cli"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/concepts/","tags":"","title":"concepts"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/credentials/","tags":"","title":"credentials"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/driver/","tags":"","title":"driver"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/examples/","tags":"","title":"examples"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/image/","tags":"","title":"image"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/reference/","tags":"","title":"reference"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":" Stevedore the Docker images factory\nLearn More Download Stevedore is a tool for building Docker images at scale, and it is not intended to replace Dockerfile or Buildkit. Instead, Stevedore can be used in conjunction with these tools to help streamline the process of building and promoting multiple Docker images.\nStandardize Build your Docker images in a standardized way. Create a Dockerfile and reuse it for as many use cases as needed\nRelatives build Automate the building of related Docker images by defining their relationships and dependencies\nCredentials Store credentials to log in to your Docker registry, AWS Elastic Container Registry or a Git server\nPromote Easily promote or copy Docker images from one registry to another using Stevedore’s image promotion feature\nSemver awareness Automatically generate tags for semantic version 2.0.0 when building Docker image\nMultiple build contexts Build your images using multiple build context sources. Use local files, a git repository or merge several sources\n","categories":"","description":"","excerpt":" Stevedore the Docker images factory\nLearn More Download Stevedore is …","ref":"/","tags":"","title":"Stevedore"}]